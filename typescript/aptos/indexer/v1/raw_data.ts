/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: aptos/indexer/v1/raw_data.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../transaction/v1/transaction";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace aptos.indexer.v1 {
    export class GetTransactionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({} & (({
            starting_version?: string;
        }) | ({
            transactions_count?: string;
        }) | ({
            batch_size?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("starting_version" in data && data.starting_version != undefined) {
                    this.starting_version = data.starting_version;
                }
                if ("transactions_count" in data && data.transactions_count != undefined) {
                    this.transactions_count = data.transactions_count;
                }
                if ("batch_size" in data && data.batch_size != undefined) {
                    this.batch_size = data.batch_size;
                }
            }
        }
        get starting_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set starting_version(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_starting_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get transactions_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set transactions_count(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_transactions_count() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get batch_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set batch_size(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_batch_size() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _starting_version() {
            const cases: {
                [index: number]: "none" | "starting_version";
            } = {
                0: "none",
                1: "starting_version"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _transactions_count() {
            const cases: {
                [index: number]: "none" | "transactions_count";
            } = {
                0: "none",
                2: "transactions_count"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _batch_size() {
            const cases: {
                [index: number]: "none" | "batch_size";
            } = {
                0: "none",
                3: "batch_size"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            starting_version?: string;
            transactions_count?: string;
            batch_size?: number;
        }): GetTransactionsRequest {
            const message = new GetTransactionsRequest({});
            if (data.starting_version != null) {
                message.starting_version = data.starting_version;
            }
            if (data.transactions_count != null) {
                message.transactions_count = data.transactions_count;
            }
            if (data.batch_size != null) {
                message.batch_size = data.batch_size;
            }
            return message;
        }
        toObject() {
            const data: {
                starting_version?: string;
                transactions_count?: string;
                batch_size?: number;
            } = {};
            if (this.starting_version != null) {
                data.starting_version = this.starting_version;
            }
            if (this.transactions_count != null) {
                data.transactions_count = this.transactions_count;
            }
            if (this.batch_size != null) {
                data.batch_size = this.batch_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_starting_version)
                writer.writeUint64String(1, this.starting_version);
            if (this.has_transactions_count)
                writer.writeUint64String(2, this.transactions_count);
            if (this.has_batch_size)
                writer.writeUint64(3, this.batch_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.starting_version = reader.readUint64String();
                        break;
                    case 2:
                        message.transactions_count = reader.readUint64String();
                        break;
                    case 3:
                        message.batch_size = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionsRequest {
            return GetTransactionsRequest.deserialize(bytes);
        }
    }
    export class TransactionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            transactions?: dependency_1.aptos.transaction.v1.Transaction[];
        } & (({
            chain_id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.aptos.transaction.v1.Transaction, 1) as dependency_1.aptos.transaction.v1.Transaction[];
        }
        set transactions(value: dependency_1.aptos.transaction.v1.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set chain_id(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_chain_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _chain_id() {
            const cases: {
                [index: number]: "none" | "chain_id";
            } = {
                0: "none",
                2: "chain_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof dependency_1.aptos.transaction.v1.Transaction.prototype.toObject>[];
            chain_id?: string;
        }): TransactionsResponse {
            const message = new TransactionsResponse({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => dependency_1.aptos.transaction.v1.Transaction.fromObject(item));
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof dependency_1.aptos.transaction.v1.Transaction.prototype.toObject>[];
                chain_id?: string;
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: dependency_1.aptos.transaction.v1.Transaction) => item.toObject());
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions.length)
                writer.writeRepeatedMessage(1, this.transactions, (item: dependency_1.aptos.transaction.v1.Transaction) => item.serialize(writer));
            if (this.has_chain_id)
                writer.writeUint64String(2, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.aptos.transaction.v1.Transaction.deserialize(reader), dependency_1.aptos.transaction.v1.Transaction));
                        break;
                    case 2:
                        message.chain_id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionsResponse {
            return TransactionsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRawDataService {
        static definition = {
            GetTransactions: {
                path: "/aptos.indexer.v1.RawData/GetTransactions",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetTransactionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTransactions(call: grpc_1.ServerWritableStream<GetTransactionsRequest, TransactionsResponse>): void;
    }
    export class RawDataClient extends grpc_1.makeGenericClientConstructor(UnimplementedRawDataService.definition, "RawData", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTransactions: GrpcStreamServiceInterface<GetTransactionsRequest, GetTransactionsRequest> = (message: GetTransactionsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetTransactionsRequest> => {
            return super.GetTransactions(message, metadata, options);
        };
    }
}
