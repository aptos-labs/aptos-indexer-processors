/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: aptos/transaction/v1/transaction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../util/timestamp/timestamp";
import * as pb_1 from "google-protobuf";
export namespace aptos.transaction.v1 {
    export enum MoveTypes {
        MOVE_TYPES_UNSPECIFIED = 0,
        MOVE_TYPES_BOOL = 1,
        MOVE_TYPES_U8 = 2,
        MOVE_TYPES_U16 = 12,
        MOVE_TYPES_U32 = 13,
        MOVE_TYPES_U64 = 3,
        MOVE_TYPES_U128 = 4,
        MOVE_TYPES_U256 = 14,
        MOVE_TYPES_ADDRESS = 5,
        MOVE_TYPES_SIGNER = 6,
        MOVE_TYPES_VECTOR = 7,
        MOVE_TYPES_STRUCT = 8,
        MOVE_TYPES_GENERIC_TYPE_PARAM = 9,
        MOVE_TYPES_REFERENCE = 10,
        MOVE_TYPES_UNPARSABLE = 11
    }
    export enum MoveAbility {
        MOVE_ABILITY_UNSPECIFIED = 0,
        MOVE_ABILITY_COPY = 1,
        MOVE_ABILITY_DROP = 2,
        MOVE_ABILITY_STORE = 3,
        MOVE_ABILITY_KEY = 4
    }
    export class Block extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: dependency_1.aptos.util.timestamp.Timestamp;
            height?: string;
            transactions?: Transaction[];
            chain_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.aptos.util.timestamp.Timestamp, 1) as dependency_1.aptos.util.timestamp.Timestamp;
        }
        set timestamp(value: dependency_1.aptos.util.timestamp.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set height(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, Transaction, 3) as Transaction[];
        }
        set transactions(value: Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set chain_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.aptos.util.timestamp.Timestamp.prototype.toObject>;
            height?: string;
            transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
            chain_id?: number;
        }): Block {
            const message = new Block({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.aptos.util.timestamp.Timestamp.fromObject(data.timestamp);
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => Transaction.fromObject(item));
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.aptos.util.timestamp.Timestamp.prototype.toObject>;
                height?: string;
                transactions?: ReturnType<typeof Transaction.prototype.toObject>[];
                chain_id?: number;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: Transaction) => item.toObject());
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.height != "0")
                writer.writeUint64String(2, this.height);
            if (this.transactions.length)
                writer.writeRepeatedMessage(3, this.transactions, (item: Transaction) => item.serialize(writer));
            if (this.chain_id != 0)
                writer.writeUint32(4, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Block {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Block();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.aptos.util.timestamp.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.height = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Transaction.deserialize(reader), Transaction));
                        break;
                    case 4:
                        message.chain_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Block {
            return Block.deserialize(bytes);
        }
    }
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [[7, 8, 9, 10]];
        constructor(data?: any[] | ({
            timestamp?: dependency_1.aptos.util.timestamp.Timestamp;
            version?: string;
            info?: TransactionInfo;
            epoch?: string;
            block_height?: string;
            type?: Transaction.TransactionType;
        } & (({
            block_metadata?: BlockMetadataTransaction;
            genesis?: never;
            state_checkpoint?: never;
            user?: never;
        } | {
            block_metadata?: never;
            genesis?: GenesisTransaction;
            state_checkpoint?: never;
            user?: never;
        } | {
            block_metadata?: never;
            genesis?: never;
            state_checkpoint?: StateCheckpointTransaction;
            user?: never;
        } | {
            block_metadata?: never;
            genesis?: never;
            state_checkpoint?: never;
            user?: UserTransaction;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("block_metadata" in data && data.block_metadata != undefined) {
                    this.block_metadata = data.block_metadata;
                }
                if ("genesis" in data && data.genesis != undefined) {
                    this.genesis = data.genesis;
                }
                if ("state_checkpoint" in data && data.state_checkpoint != undefined) {
                    this.state_checkpoint = data.state_checkpoint;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.aptos.util.timestamp.Timestamp, 1) as dependency_1.aptos.util.timestamp.Timestamp;
        }
        set timestamp(value: dependency_1.aptos.util.timestamp.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get info() {
            return pb_1.Message.getWrapperField(this, TransactionInfo, 3) as TransactionInfo;
        }
        set info(value: TransactionInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set epoch(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set block_height(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 6, Transaction.TransactionType.TRANSACTION_TYPE_UNSPECIFIED) as Transaction.TransactionType;
        }
        set type(value: Transaction.TransactionType) {
            pb_1.Message.setField(this, 6, value);
        }
        get block_metadata() {
            return pb_1.Message.getWrapperField(this, BlockMetadataTransaction, 7) as BlockMetadataTransaction;
        }
        set block_metadata(value: BlockMetadataTransaction) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_block_metadata() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get genesis() {
            return pb_1.Message.getWrapperField(this, GenesisTransaction, 8) as GenesisTransaction;
        }
        set genesis(value: GenesisTransaction) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_genesis() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get state_checkpoint() {
            return pb_1.Message.getWrapperField(this, StateCheckpointTransaction, 9) as StateCheckpointTransaction;
        }
        set state_checkpoint(value: StateCheckpointTransaction) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_state_checkpoint() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get user() {
            return pb_1.Message.getWrapperField(this, UserTransaction, 10) as UserTransaction;
        }
        set user(value: UserTransaction) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get txn_data() {
            const cases: {
                [index: number]: "none" | "block_metadata" | "genesis" | "state_checkpoint" | "user";
            } = {
                0: "none",
                7: "block_metadata",
                8: "genesis",
                9: "state_checkpoint",
                10: "user"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7, 8, 9, 10])];
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.aptos.util.timestamp.Timestamp.prototype.toObject>;
            version?: string;
            info?: ReturnType<typeof TransactionInfo.prototype.toObject>;
            epoch?: string;
            block_height?: string;
            type?: Transaction.TransactionType;
            block_metadata?: ReturnType<typeof BlockMetadataTransaction.prototype.toObject>;
            genesis?: ReturnType<typeof GenesisTransaction.prototype.toObject>;
            state_checkpoint?: ReturnType<typeof StateCheckpointTransaction.prototype.toObject>;
            user?: ReturnType<typeof UserTransaction.prototype.toObject>;
        }): Transaction {
            const message = new Transaction({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.aptos.util.timestamp.Timestamp.fromObject(data.timestamp);
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.info != null) {
                message.info = TransactionInfo.fromObject(data.info);
            }
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.block_metadata != null) {
                message.block_metadata = BlockMetadataTransaction.fromObject(data.block_metadata);
            }
            if (data.genesis != null) {
                message.genesis = GenesisTransaction.fromObject(data.genesis);
            }
            if (data.state_checkpoint != null) {
                message.state_checkpoint = StateCheckpointTransaction.fromObject(data.state_checkpoint);
            }
            if (data.user != null) {
                message.user = UserTransaction.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.aptos.util.timestamp.Timestamp.prototype.toObject>;
                version?: string;
                info?: ReturnType<typeof TransactionInfo.prototype.toObject>;
                epoch?: string;
                block_height?: string;
                type?: Transaction.TransactionType;
                block_metadata?: ReturnType<typeof BlockMetadataTransaction.prototype.toObject>;
                genesis?: ReturnType<typeof GenesisTransaction.prototype.toObject>;
                state_checkpoint?: ReturnType<typeof StateCheckpointTransaction.prototype.toObject>;
                user?: ReturnType<typeof UserTransaction.prototype.toObject>;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.block_metadata != null) {
                data.block_metadata = this.block_metadata.toObject();
            }
            if (this.genesis != null) {
                data.genesis = this.genesis.toObject();
            }
            if (this.state_checkpoint != null) {
                data.state_checkpoint = this.state_checkpoint.toObject();
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_timestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.version != "0")
                writer.writeUint64String(2, this.version);
            if (this.has_info)
                writer.writeMessage(3, this.info, () => this.info.serialize(writer));
            if (this.epoch != "0")
                writer.writeUint64String(4, this.epoch);
            if (this.block_height != "0")
                writer.writeUint64String(5, this.block_height);
            if (this.type != Transaction.TransactionType.TRANSACTION_TYPE_UNSPECIFIED)
                writer.writeEnum(6, this.type);
            if (this.has_block_metadata)
                writer.writeMessage(7, this.block_metadata, () => this.block_metadata.serialize(writer));
            if (this.has_genesis)
                writer.writeMessage(8, this.genesis, () => this.genesis.serialize(writer));
            if (this.has_state_checkpoint)
                writer.writeMessage(9, this.state_checkpoint, () => this.state_checkpoint.serialize(writer));
            if (this.has_user)
                writer.writeMessage(10, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.aptos.util.timestamp.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.version = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.info, () => message.info = TransactionInfo.deserialize(reader));
                        break;
                    case 4:
                        message.epoch = reader.readUint64String();
                        break;
                    case 5:
                        message.block_height = reader.readUint64String();
                        break;
                    case 6:
                        message.type = reader.readEnum();
                        break;
                    case 7:
                        reader.readMessage(message.block_metadata, () => message.block_metadata = BlockMetadataTransaction.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.genesis, () => message.genesis = GenesisTransaction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.state_checkpoint, () => message.state_checkpoint = StateCheckpointTransaction.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.user, () => message.user = UserTransaction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export namespace Transaction {
        export enum TransactionType {
            TRANSACTION_TYPE_UNSPECIFIED = 0,
            TRANSACTION_TYPE_GENESIS = 1,
            TRANSACTION_TYPE_BLOCK_METADATA = 2,
            TRANSACTION_TYPE_STATE_CHECKPOINT = 3,
            TRANSACTION_TYPE_USER = 4
        }
    }
    export class BlockMetadataTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            round?: string;
            events?: Event[];
            previous_block_votes_bitvec?: Uint8Array;
            proposer?: string;
            failed_proposer_indices?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("round" in data && data.round != undefined) {
                    this.round = data.round;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("previous_block_votes_bitvec" in data && data.previous_block_votes_bitvec != undefined) {
                    this.previous_block_votes_bitvec = data.previous_block_votes_bitvec;
                }
                if ("proposer" in data && data.proposer != undefined) {
                    this.proposer = data.proposer;
                }
                if ("failed_proposer_indices" in data && data.failed_proposer_indices != undefined) {
                    this.failed_proposer_indices = data.failed_proposer_indices;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get round() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set round(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 3) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get previous_block_votes_bitvec() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set previous_block_votes_bitvec(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get proposer() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set proposer(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get failed_proposer_indices() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set failed_proposer_indices(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            round?: string;
            events?: ReturnType<typeof Event.prototype.toObject>[];
            previous_block_votes_bitvec?: Uint8Array;
            proposer?: string;
            failed_proposer_indices?: number[];
        }): BlockMetadataTransaction {
            const message = new BlockMetadataTransaction({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.round != null) {
                message.round = data.round;
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            if (data.previous_block_votes_bitvec != null) {
                message.previous_block_votes_bitvec = data.previous_block_votes_bitvec;
            }
            if (data.proposer != null) {
                message.proposer = data.proposer;
            }
            if (data.failed_proposer_indices != null) {
                message.failed_proposer_indices = data.failed_proposer_indices;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                round?: string;
                events?: ReturnType<typeof Event.prototype.toObject>[];
                previous_block_votes_bitvec?: Uint8Array;
                proposer?: string;
                failed_proposer_indices?: number[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.round != null) {
                data.round = this.round;
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            if (this.previous_block_votes_bitvec != null) {
                data.previous_block_votes_bitvec = this.previous_block_votes_bitvec;
            }
            if (this.proposer != null) {
                data.proposer = this.proposer;
            }
            if (this.failed_proposer_indices != null) {
                data.failed_proposer_indices = this.failed_proposer_indices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.round != "0")
                writer.writeUint64String(2, this.round);
            if (this.events.length)
                writer.writeRepeatedMessage(3, this.events, (item: Event) => item.serialize(writer));
            if (this.previous_block_votes_bitvec.length)
                writer.writeBytes(4, this.previous_block_votes_bitvec);
            if (this.proposer.length)
                writer.writeString(5, this.proposer);
            if (this.failed_proposer_indices.length)
                writer.writePackedUint32(6, this.failed_proposer_indices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockMetadataTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockMetadataTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.round = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Event.deserialize(reader), Event));
                        break;
                    case 4:
                        message.previous_block_votes_bitvec = reader.readBytes();
                        break;
                    case 5:
                        message.proposer = reader.readString();
                        break;
                    case 6:
                        message.failed_proposer_indices = reader.readPackedUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockMetadataTransaction {
            return BlockMetadataTransaction.deserialize(bytes);
        }
    }
    export class GenesisTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            payload?: WriteSet;
            events?: Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, WriteSet, 1) as WriteSet;
        }
        set payload(value: WriteSet) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 2) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            payload?: ReturnType<typeof WriteSet.prototype.toObject>;
            events?: ReturnType<typeof Event.prototype.toObject>[];
        }): GenesisTransaction {
            const message = new GenesisTransaction({});
            if (data.payload != null) {
                message.payload = WriteSet.fromObject(data.payload);
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                payload?: ReturnType<typeof WriteSet.prototype.toObject>;
                events?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_payload)
                writer.writeMessage(1, this.payload, () => this.payload.serialize(writer));
            if (this.events.length)
                writer.writeRepeatedMessage(2, this.events, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.payload, () => message.payload = WriteSet.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisTransaction {
            return GenesisTransaction.deserialize(bytes);
        }
    }
    export class StateCheckpointTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StateCheckpointTransaction {
            const message = new StateCheckpointTransaction({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateCheckpointTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateCheckpointTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StateCheckpointTransaction {
            return StateCheckpointTransaction.deserialize(bytes);
        }
    }
    export class UserTransaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request?: UserTransactionRequest;
            events?: Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, UserTransactionRequest, 1) as UserTransactionRequest;
        }
        set request(value: UserTransactionRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 2) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            request?: ReturnType<typeof UserTransactionRequest.prototype.toObject>;
            events?: ReturnType<typeof Event.prototype.toObject>[];
        }): UserTransaction {
            const message = new UserTransaction({});
            if (data.request != null) {
                message.request = UserTransactionRequest.fromObject(data.request);
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof UserTransactionRequest.prototype.toObject>;
                events?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.events.length)
                writer.writeRepeatedMessage(2, this.events, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = UserTransactionRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserTransaction {
            return UserTransaction.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: EventKey;
            sequence_number?: string;
            type?: MoveType;
            type_str?: string;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("type_str" in data && data.type_str != undefined) {
                    this.type_str = data.type_str;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, EventKey, 1) as EventKey;
        }
        set key(value: EventKey) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set sequence_number(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, MoveType, 3) as MoveType;
        }
        set type(value: MoveType) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type_str() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set type_str(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: ReturnType<typeof EventKey.prototype.toObject>;
            sequence_number?: string;
            type?: ReturnType<typeof MoveType.prototype.toObject>;
            type_str?: string;
            data?: string;
        }): Event {
            const message = new Event({});
            if (data.key != null) {
                message.key = EventKey.fromObject(data.key);
            }
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            if (data.type != null) {
                message.type = MoveType.fromObject(data.type);
            }
            if (data.type_str != null) {
                message.type_str = data.type_str;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof EventKey.prototype.toObject>;
                sequence_number?: string;
                type?: ReturnType<typeof MoveType.prototype.toObject>;
                type_str?: string;
                data?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.type_str != null) {
                data.type_str = this.type_str;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (this.sequence_number != "0")
                writer.writeUint64String(2, this.sequence_number);
            if (this.has_type)
                writer.writeMessage(3, this.type, () => this.type.serialize(writer));
            if (this.type_str.length)
                writer.writeString(5, this.type_str);
            if (this.data.length)
                writer.writeString(4, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = EventKey.deserialize(reader));
                        break;
                    case 2:
                        message.sequence_number = reader.readUint64String();
                        break;
                    case 3:
                        reader.readMessage(message.type, () => message.type = MoveType.deserialize(reader));
                        break;
                    case 5:
                        message.type_str = reader.readString();
                        break;
                    case 4:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class TransactionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            hash?: Uint8Array;
            state_change_hash?: Uint8Array;
            event_root_hash?: Uint8Array;
            gas_used?: string;
            success?: boolean;
            vm_status?: string;
            accumulator_root_hash?: Uint8Array;
            changes?: WriteSetChange[];
        } & (({
            state_checkpoint_hash?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("state_change_hash" in data && data.state_change_hash != undefined) {
                    this.state_change_hash = data.state_change_hash;
                }
                if ("event_root_hash" in data && data.event_root_hash != undefined) {
                    this.event_root_hash = data.event_root_hash;
                }
                if ("state_checkpoint_hash" in data && data.state_checkpoint_hash != undefined) {
                    this.state_checkpoint_hash = data.state_checkpoint_hash;
                }
                if ("gas_used" in data && data.gas_used != undefined) {
                    this.gas_used = data.gas_used;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("vm_status" in data && data.vm_status != undefined) {
                    this.vm_status = data.vm_status;
                }
                if ("accumulator_root_hash" in data && data.accumulator_root_hash != undefined) {
                    this.accumulator_root_hash = data.accumulator_root_hash;
                }
                if ("changes" in data && data.changes != undefined) {
                    this.changes = data.changes;
                }
            }
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get state_change_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set state_change_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_root_hash() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set event_root_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get state_checkpoint_hash() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set state_checkpoint_hash(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_state_checkpoint_hash() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get gas_used() {
            return pb_1.Message.getFieldWithDefault(this, 5, "0") as string;
        }
        set gas_used(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get vm_status() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set vm_status(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get accumulator_root_hash() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set accumulator_root_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 8, value);
        }
        get changes() {
            return pb_1.Message.getRepeatedWrapperField(this, WriteSetChange, 9) as WriteSetChange[];
        }
        set changes(value: WriteSetChange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get _state_checkpoint_hash() {
            const cases: {
                [index: number]: "none" | "state_checkpoint_hash";
            } = {
                0: "none",
                4: "state_checkpoint_hash"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            hash?: Uint8Array;
            state_change_hash?: Uint8Array;
            event_root_hash?: Uint8Array;
            state_checkpoint_hash?: Uint8Array;
            gas_used?: string;
            success?: boolean;
            vm_status?: string;
            accumulator_root_hash?: Uint8Array;
            changes?: ReturnType<typeof WriteSetChange.prototype.toObject>[];
        }): TransactionInfo {
            const message = new TransactionInfo({});
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.state_change_hash != null) {
                message.state_change_hash = data.state_change_hash;
            }
            if (data.event_root_hash != null) {
                message.event_root_hash = data.event_root_hash;
            }
            if (data.state_checkpoint_hash != null) {
                message.state_checkpoint_hash = data.state_checkpoint_hash;
            }
            if (data.gas_used != null) {
                message.gas_used = data.gas_used;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.vm_status != null) {
                message.vm_status = data.vm_status;
            }
            if (data.accumulator_root_hash != null) {
                message.accumulator_root_hash = data.accumulator_root_hash;
            }
            if (data.changes != null) {
                message.changes = data.changes.map(item => WriteSetChange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: Uint8Array;
                state_change_hash?: Uint8Array;
                event_root_hash?: Uint8Array;
                state_checkpoint_hash?: Uint8Array;
                gas_used?: string;
                success?: boolean;
                vm_status?: string;
                accumulator_root_hash?: Uint8Array;
                changes?: ReturnType<typeof WriteSetChange.prototype.toObject>[];
            } = {};
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.state_change_hash != null) {
                data.state_change_hash = this.state_change_hash;
            }
            if (this.event_root_hash != null) {
                data.event_root_hash = this.event_root_hash;
            }
            if (this.state_checkpoint_hash != null) {
                data.state_checkpoint_hash = this.state_checkpoint_hash;
            }
            if (this.gas_used != null) {
                data.gas_used = this.gas_used;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.vm_status != null) {
                data.vm_status = this.vm_status;
            }
            if (this.accumulator_root_hash != null) {
                data.accumulator_root_hash = this.accumulator_root_hash;
            }
            if (this.changes != null) {
                data.changes = this.changes.map((item: WriteSetChange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash.length)
                writer.writeBytes(1, this.hash);
            if (this.state_change_hash.length)
                writer.writeBytes(2, this.state_change_hash);
            if (this.event_root_hash.length)
                writer.writeBytes(3, this.event_root_hash);
            if (this.has_state_checkpoint_hash)
                writer.writeBytes(4, this.state_checkpoint_hash);
            if (this.gas_used != "0")
                writer.writeUint64String(5, this.gas_used);
            if (this.success != false)
                writer.writeBool(6, this.success);
            if (this.vm_status.length)
                writer.writeString(7, this.vm_status);
            if (this.accumulator_root_hash.length)
                writer.writeBytes(8, this.accumulator_root_hash);
            if (this.changes.length)
                writer.writeRepeatedMessage(9, this.changes, (item: WriteSetChange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hash = reader.readBytes();
                        break;
                    case 2:
                        message.state_change_hash = reader.readBytes();
                        break;
                    case 3:
                        message.event_root_hash = reader.readBytes();
                        break;
                    case 4:
                        message.state_checkpoint_hash = reader.readBytes();
                        break;
                    case 5:
                        message.gas_used = reader.readUint64String();
                        break;
                    case 6:
                        message.success = reader.readBool();
                        break;
                    case 7:
                        message.vm_status = reader.readString();
                        break;
                    case 8:
                        message.accumulator_root_hash = reader.readBytes();
                        break;
                    case 9:
                        reader.readMessage(message.changes, () => pb_1.Message.addToRepeatedWrapperField(message, 9, WriteSetChange.deserialize(reader), WriteSetChange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionInfo {
            return TransactionInfo.deserialize(bytes);
        }
    }
    export class EventKey extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creation_number?: string;
            account_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creation_number" in data && data.creation_number != undefined) {
                    this.creation_number = data.creation_number;
                }
                if ("account_address" in data && data.account_address != undefined) {
                    this.account_address = data.account_address;
                }
            }
        }
        get creation_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set creation_number(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            creation_number?: string;
            account_address?: string;
        }): EventKey {
            const message = new EventKey({});
            if (data.creation_number != null) {
                message.creation_number = data.creation_number;
            }
            if (data.account_address != null) {
                message.account_address = data.account_address;
            }
            return message;
        }
        toObject() {
            const data: {
                creation_number?: string;
                account_address?: string;
            } = {};
            if (this.creation_number != null) {
                data.creation_number = this.creation_number;
            }
            if (this.account_address != null) {
                data.account_address = this.account_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creation_number != "0")
                writer.writeUint64String(1, this.creation_number);
            if (this.account_address.length)
                writer.writeString(2, this.account_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventKey {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventKey();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creation_number = reader.readUint64String();
                        break;
                    case 2:
                        message.account_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventKey {
            return EventKey.deserialize(bytes);
        }
    }
    export class UserTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            sequence_number?: string;
            max_gas_amount?: string;
            gas_unit_price?: string;
            expiration_timestamp_secs?: dependency_1.aptos.util.timestamp.Timestamp;
            payload?: TransactionPayload;
            signature?: Signature;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
                if ("max_gas_amount" in data && data.max_gas_amount != undefined) {
                    this.max_gas_amount = data.max_gas_amount;
                }
                if ("gas_unit_price" in data && data.gas_unit_price != undefined) {
                    this.gas_unit_price = data.gas_unit_price;
                }
                if ("expiration_timestamp_secs" in data && data.expiration_timestamp_secs != undefined) {
                    this.expiration_timestamp_secs = data.expiration_timestamp_secs;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set sequence_number(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_gas_amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set max_gas_amount(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get gas_unit_price() {
            return pb_1.Message.getFieldWithDefault(this, 4, "0") as string;
        }
        set gas_unit_price(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get expiration_timestamp_secs() {
            return pb_1.Message.getWrapperField(this, dependency_1.aptos.util.timestamp.Timestamp, 5) as dependency_1.aptos.util.timestamp.Timestamp;
        }
        set expiration_timestamp_secs(value: dependency_1.aptos.util.timestamp.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_expiration_timestamp_secs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, TransactionPayload, 6) as TransactionPayload;
        }
        set payload(value: TransactionPayload) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get signature() {
            return pb_1.Message.getWrapperField(this, Signature, 7) as Signature;
        }
        set signature(value: Signature) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_signature() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            sender?: string;
            sequence_number?: string;
            max_gas_amount?: string;
            gas_unit_price?: string;
            expiration_timestamp_secs?: ReturnType<typeof dependency_1.aptos.util.timestamp.Timestamp.prototype.toObject>;
            payload?: ReturnType<typeof TransactionPayload.prototype.toObject>;
            signature?: ReturnType<typeof Signature.prototype.toObject>;
        }): UserTransactionRequest {
            const message = new UserTransactionRequest({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            if (data.max_gas_amount != null) {
                message.max_gas_amount = data.max_gas_amount;
            }
            if (data.gas_unit_price != null) {
                message.gas_unit_price = data.gas_unit_price;
            }
            if (data.expiration_timestamp_secs != null) {
                message.expiration_timestamp_secs = dependency_1.aptos.util.timestamp.Timestamp.fromObject(data.expiration_timestamp_secs);
            }
            if (data.payload != null) {
                message.payload = TransactionPayload.fromObject(data.payload);
            }
            if (data.signature != null) {
                message.signature = Signature.fromObject(data.signature);
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                sequence_number?: string;
                max_gas_amount?: string;
                gas_unit_price?: string;
                expiration_timestamp_secs?: ReturnType<typeof dependency_1.aptos.util.timestamp.Timestamp.prototype.toObject>;
                payload?: ReturnType<typeof TransactionPayload.prototype.toObject>;
                signature?: ReturnType<typeof Signature.prototype.toObject>;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            if (this.max_gas_amount != null) {
                data.max_gas_amount = this.max_gas_amount;
            }
            if (this.gas_unit_price != null) {
                data.gas_unit_price = this.gas_unit_price;
            }
            if (this.expiration_timestamp_secs != null) {
                data.expiration_timestamp_secs = this.expiration_timestamp_secs.toObject();
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.sequence_number != "0")
                writer.writeUint64String(2, this.sequence_number);
            if (this.max_gas_amount != "0")
                writer.writeUint64String(3, this.max_gas_amount);
            if (this.gas_unit_price != "0")
                writer.writeUint64String(4, this.gas_unit_price);
            if (this.has_expiration_timestamp_secs)
                writer.writeMessage(5, this.expiration_timestamp_secs, () => this.expiration_timestamp_secs.serialize(writer));
            if (this.has_payload)
                writer.writeMessage(6, this.payload, () => this.payload.serialize(writer));
            if (this.has_signature)
                writer.writeMessage(7, this.signature, () => this.signature.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.sequence_number = reader.readUint64String();
                        break;
                    case 3:
                        message.max_gas_amount = reader.readUint64String();
                        break;
                    case 4:
                        message.gas_unit_price = reader.readUint64String();
                        break;
                    case 5:
                        reader.readMessage(message.expiration_timestamp_secs, () => message.expiration_timestamp_secs = dependency_1.aptos.util.timestamp.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.payload, () => message.payload = TransactionPayload.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.signature, () => message.signature = Signature.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserTransactionRequest {
            return UserTransactionRequest.deserialize(bytes);
        }
    }
    export class WriteSet extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            write_set_type?: WriteSet.WriteSetType;
        } & (({
            script_write_set?: ScriptWriteSet;
            direct_write_set?: never;
        } | {
            script_write_set?: never;
            direct_write_set?: DirectWriteSet;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("write_set_type" in data && data.write_set_type != undefined) {
                    this.write_set_type = data.write_set_type;
                }
                if ("script_write_set" in data && data.script_write_set != undefined) {
                    this.script_write_set = data.script_write_set;
                }
                if ("direct_write_set" in data && data.direct_write_set != undefined) {
                    this.direct_write_set = data.direct_write_set;
                }
            }
        }
        get write_set_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, WriteSet.WriteSetType.WRITE_SET_TYPE_UNSPECIFIED) as WriteSet.WriteSetType;
        }
        set write_set_type(value: WriteSet.WriteSetType) {
            pb_1.Message.setField(this, 1, value);
        }
        get script_write_set() {
            return pb_1.Message.getWrapperField(this, ScriptWriteSet, 2) as ScriptWriteSet;
        }
        set script_write_set(value: ScriptWriteSet) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_script_write_set() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get direct_write_set() {
            return pb_1.Message.getWrapperField(this, DirectWriteSet, 3) as DirectWriteSet;
        }
        set direct_write_set(value: DirectWriteSet) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_direct_write_set() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get write_set() {
            const cases: {
                [index: number]: "none" | "script_write_set" | "direct_write_set";
            } = {
                0: "none",
                2: "script_write_set",
                3: "direct_write_set"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            write_set_type?: WriteSet.WriteSetType;
            script_write_set?: ReturnType<typeof ScriptWriteSet.prototype.toObject>;
            direct_write_set?: ReturnType<typeof DirectWriteSet.prototype.toObject>;
        }): WriteSet {
            const message = new WriteSet({});
            if (data.write_set_type != null) {
                message.write_set_type = data.write_set_type;
            }
            if (data.script_write_set != null) {
                message.script_write_set = ScriptWriteSet.fromObject(data.script_write_set);
            }
            if (data.direct_write_set != null) {
                message.direct_write_set = DirectWriteSet.fromObject(data.direct_write_set);
            }
            return message;
        }
        toObject() {
            const data: {
                write_set_type?: WriteSet.WriteSetType;
                script_write_set?: ReturnType<typeof ScriptWriteSet.prototype.toObject>;
                direct_write_set?: ReturnType<typeof DirectWriteSet.prototype.toObject>;
            } = {};
            if (this.write_set_type != null) {
                data.write_set_type = this.write_set_type;
            }
            if (this.script_write_set != null) {
                data.script_write_set = this.script_write_set.toObject();
            }
            if (this.direct_write_set != null) {
                data.direct_write_set = this.direct_write_set.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.write_set_type != WriteSet.WriteSetType.WRITE_SET_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.write_set_type);
            if (this.has_script_write_set)
                writer.writeMessage(2, this.script_write_set, () => this.script_write_set.serialize(writer));
            if (this.has_direct_write_set)
                writer.writeMessage(3, this.direct_write_set, () => this.direct_write_set.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.write_set_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.script_write_set, () => message.script_write_set = ScriptWriteSet.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.direct_write_set, () => message.direct_write_set = DirectWriteSet.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteSet {
            return WriteSet.deserialize(bytes);
        }
    }
    export namespace WriteSet {
        export enum WriteSetType {
            WRITE_SET_TYPE_UNSPECIFIED = 0,
            WRITE_SET_TYPE_SCRIPT_WRITE_SET = 1,
            WRITE_SET_TYPE_DIRECT_WRITE_SET = 2
        }
    }
    export class ScriptWriteSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            execute_as?: string;
            script?: ScriptPayload;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("execute_as" in data && data.execute_as != undefined) {
                    this.execute_as = data.execute_as;
                }
                if ("script" in data && data.script != undefined) {
                    this.script = data.script;
                }
            }
        }
        get execute_as() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set execute_as(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get script() {
            return pb_1.Message.getWrapperField(this, ScriptPayload, 2) as ScriptPayload;
        }
        set script(value: ScriptPayload) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_script() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            execute_as?: string;
            script?: ReturnType<typeof ScriptPayload.prototype.toObject>;
        }): ScriptWriteSet {
            const message = new ScriptWriteSet({});
            if (data.execute_as != null) {
                message.execute_as = data.execute_as;
            }
            if (data.script != null) {
                message.script = ScriptPayload.fromObject(data.script);
            }
            return message;
        }
        toObject() {
            const data: {
                execute_as?: string;
                script?: ReturnType<typeof ScriptPayload.prototype.toObject>;
            } = {};
            if (this.execute_as != null) {
                data.execute_as = this.execute_as;
            }
            if (this.script != null) {
                data.script = this.script.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.execute_as.length)
                writer.writeString(1, this.execute_as);
            if (this.has_script)
                writer.writeMessage(2, this.script, () => this.script.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScriptWriteSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScriptWriteSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.execute_as = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.script, () => message.script = ScriptPayload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScriptWriteSet {
            return ScriptWriteSet.deserialize(bytes);
        }
    }
    export class DirectWriteSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            write_set_change?: WriteSetChange[];
            events?: Event[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("write_set_change" in data && data.write_set_change != undefined) {
                    this.write_set_change = data.write_set_change;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get write_set_change() {
            return pb_1.Message.getRepeatedWrapperField(this, WriteSetChange, 1) as WriteSetChange[];
        }
        set write_set_change(value: WriteSetChange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 2) as Event[];
        }
        set events(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            write_set_change?: ReturnType<typeof WriteSetChange.prototype.toObject>[];
            events?: ReturnType<typeof Event.prototype.toObject>[];
        }): DirectWriteSet {
            const message = new DirectWriteSet({});
            if (data.write_set_change != null) {
                message.write_set_change = data.write_set_change.map(item => WriteSetChange.fromObject(item));
            }
            if (data.events != null) {
                message.events = data.events.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                write_set_change?: ReturnType<typeof WriteSetChange.prototype.toObject>[];
                events?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.write_set_change != null) {
                data.write_set_change = this.write_set_change.map((item: WriteSetChange) => item.toObject());
            }
            if (this.events != null) {
                data.events = this.events.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.write_set_change.length)
                writer.writeRepeatedMessage(1, this.write_set_change, (item: WriteSetChange) => item.serialize(writer));
            if (this.events.length)
                writer.writeRepeatedMessage(2, this.events, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DirectWriteSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DirectWriteSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.write_set_change, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WriteSetChange.deserialize(reader), WriteSetChange));
                        break;
                    case 2:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DirectWriteSet {
            return DirectWriteSet.deserialize(bytes);
        }
    }
    export class WriteSetChange extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({
            type?: WriteSetChange.Type;
        } & (({
            delete_module?: DeleteModule;
            delete_resource?: never;
            delete_table_item?: never;
            write_module?: never;
            write_resource?: never;
            write_table_item?: never;
        } | {
            delete_module?: never;
            delete_resource?: DeleteResource;
            delete_table_item?: never;
            write_module?: never;
            write_resource?: never;
            write_table_item?: never;
        } | {
            delete_module?: never;
            delete_resource?: never;
            delete_table_item?: DeleteTableItem;
            write_module?: never;
            write_resource?: never;
            write_table_item?: never;
        } | {
            delete_module?: never;
            delete_resource?: never;
            delete_table_item?: never;
            write_module?: WriteModule;
            write_resource?: never;
            write_table_item?: never;
        } | {
            delete_module?: never;
            delete_resource?: never;
            delete_table_item?: never;
            write_module?: never;
            write_resource?: WriteResource;
            write_table_item?: never;
        } | {
            delete_module?: never;
            delete_resource?: never;
            delete_table_item?: never;
            write_module?: never;
            write_resource?: never;
            write_table_item?: WriteTableItem;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("delete_module" in data && data.delete_module != undefined) {
                    this.delete_module = data.delete_module;
                }
                if ("delete_resource" in data && data.delete_resource != undefined) {
                    this.delete_resource = data.delete_resource;
                }
                if ("delete_table_item" in data && data.delete_table_item != undefined) {
                    this.delete_table_item = data.delete_table_item;
                }
                if ("write_module" in data && data.write_module != undefined) {
                    this.write_module = data.write_module;
                }
                if ("write_resource" in data && data.write_resource != undefined) {
                    this.write_resource = data.write_resource;
                }
                if ("write_table_item" in data && data.write_table_item != undefined) {
                    this.write_table_item = data.write_table_item;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, WriteSetChange.Type.TYPE_UNSPECIFIED) as WriteSetChange.Type;
        }
        set type(value: WriteSetChange.Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get delete_module() {
            return pb_1.Message.getWrapperField(this, DeleteModule, 2) as DeleteModule;
        }
        set delete_module(value: DeleteModule) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_delete_module() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get delete_resource() {
            return pb_1.Message.getWrapperField(this, DeleteResource, 3) as DeleteResource;
        }
        set delete_resource(value: DeleteResource) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_delete_resource() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get delete_table_item() {
            return pb_1.Message.getWrapperField(this, DeleteTableItem, 4) as DeleteTableItem;
        }
        set delete_table_item(value: DeleteTableItem) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_delete_table_item() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get write_module() {
            return pb_1.Message.getWrapperField(this, WriteModule, 5) as WriteModule;
        }
        set write_module(value: WriteModule) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_write_module() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get write_resource() {
            return pb_1.Message.getWrapperField(this, WriteResource, 6) as WriteResource;
        }
        set write_resource(value: WriteResource) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_write_resource() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get write_table_item() {
            return pb_1.Message.getWrapperField(this, WriteTableItem, 7) as WriteTableItem;
        }
        set write_table_item(value: WriteTableItem) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_write_table_item() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get change() {
            const cases: {
                [index: number]: "none" | "delete_module" | "delete_resource" | "delete_table_item" | "write_module" | "write_resource" | "write_table_item";
            } = {
                0: "none",
                2: "delete_module",
                3: "delete_resource",
                4: "delete_table_item",
                5: "write_module",
                6: "write_resource",
                7: "write_table_item"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            type?: WriteSetChange.Type;
            delete_module?: ReturnType<typeof DeleteModule.prototype.toObject>;
            delete_resource?: ReturnType<typeof DeleteResource.prototype.toObject>;
            delete_table_item?: ReturnType<typeof DeleteTableItem.prototype.toObject>;
            write_module?: ReturnType<typeof WriteModule.prototype.toObject>;
            write_resource?: ReturnType<typeof WriteResource.prototype.toObject>;
            write_table_item?: ReturnType<typeof WriteTableItem.prototype.toObject>;
        }): WriteSetChange {
            const message = new WriteSetChange({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.delete_module != null) {
                message.delete_module = DeleteModule.fromObject(data.delete_module);
            }
            if (data.delete_resource != null) {
                message.delete_resource = DeleteResource.fromObject(data.delete_resource);
            }
            if (data.delete_table_item != null) {
                message.delete_table_item = DeleteTableItem.fromObject(data.delete_table_item);
            }
            if (data.write_module != null) {
                message.write_module = WriteModule.fromObject(data.write_module);
            }
            if (data.write_resource != null) {
                message.write_resource = WriteResource.fromObject(data.write_resource);
            }
            if (data.write_table_item != null) {
                message.write_table_item = WriteTableItem.fromObject(data.write_table_item);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: WriteSetChange.Type;
                delete_module?: ReturnType<typeof DeleteModule.prototype.toObject>;
                delete_resource?: ReturnType<typeof DeleteResource.prototype.toObject>;
                delete_table_item?: ReturnType<typeof DeleteTableItem.prototype.toObject>;
                write_module?: ReturnType<typeof WriteModule.prototype.toObject>;
                write_resource?: ReturnType<typeof WriteResource.prototype.toObject>;
                write_table_item?: ReturnType<typeof WriteTableItem.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.delete_module != null) {
                data.delete_module = this.delete_module.toObject();
            }
            if (this.delete_resource != null) {
                data.delete_resource = this.delete_resource.toObject();
            }
            if (this.delete_table_item != null) {
                data.delete_table_item = this.delete_table_item.toObject();
            }
            if (this.write_module != null) {
                data.write_module = this.write_module.toObject();
            }
            if (this.write_resource != null) {
                data.write_resource = this.write_resource.toObject();
            }
            if (this.write_table_item != null) {
                data.write_table_item = this.write_table_item.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != WriteSetChange.Type.TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.has_delete_module)
                writer.writeMessage(2, this.delete_module, () => this.delete_module.serialize(writer));
            if (this.has_delete_resource)
                writer.writeMessage(3, this.delete_resource, () => this.delete_resource.serialize(writer));
            if (this.has_delete_table_item)
                writer.writeMessage(4, this.delete_table_item, () => this.delete_table_item.serialize(writer));
            if (this.has_write_module)
                writer.writeMessage(5, this.write_module, () => this.write_module.serialize(writer));
            if (this.has_write_resource)
                writer.writeMessage(6, this.write_resource, () => this.write_resource.serialize(writer));
            if (this.has_write_table_item)
                writer.writeMessage(7, this.write_table_item, () => this.write_table_item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteSetChange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteSetChange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.delete_module, () => message.delete_module = DeleteModule.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.delete_resource, () => message.delete_resource = DeleteResource.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.delete_table_item, () => message.delete_table_item = DeleteTableItem.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.write_module, () => message.write_module = WriteModule.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.write_resource, () => message.write_resource = WriteResource.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.write_table_item, () => message.write_table_item = WriteTableItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteSetChange {
            return WriteSetChange.deserialize(bytes);
        }
    }
    export namespace WriteSetChange {
        export enum Type {
            TYPE_UNSPECIFIED = 0,
            TYPE_DELETE_MODULE = 1,
            TYPE_DELETE_RESOURCE = 2,
            TYPE_DELETE_TABLE_ITEM = 3,
            TYPE_WRITE_MODULE = 4,
            TYPE_WRITE_RESOURCE = 5,
            TYPE_WRITE_TABLE_ITEM = 6
        }
    }
    export class DeleteModule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            state_key_hash?: Uint8Array;
            module?: MoveModuleId;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("state_key_hash" in data && data.state_key_hash != undefined) {
                    this.state_key_hash = data.state_key_hash;
                }
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state_key_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set state_key_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get module() {
            return pb_1.Message.getWrapperField(this, MoveModuleId, 3) as MoveModuleId;
        }
        set module(value: MoveModuleId) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_module() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            address?: string;
            state_key_hash?: Uint8Array;
            module?: ReturnType<typeof MoveModuleId.prototype.toObject>;
        }): DeleteModule {
            const message = new DeleteModule({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.state_key_hash != null) {
                message.state_key_hash = data.state_key_hash;
            }
            if (data.module != null) {
                message.module = MoveModuleId.fromObject(data.module);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                state_key_hash?: Uint8Array;
                module?: ReturnType<typeof MoveModuleId.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.state_key_hash != null) {
                data.state_key_hash = this.state_key_hash;
            }
            if (this.module != null) {
                data.module = this.module.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.state_key_hash.length)
                writer.writeBytes(2, this.state_key_hash);
            if (this.has_module)
                writer.writeMessage(3, this.module, () => this.module.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteModule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteModule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.state_key_hash = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.module, () => message.module = MoveModuleId.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteModule {
            return DeleteModule.deserialize(bytes);
        }
    }
    export class DeleteResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            state_key_hash?: Uint8Array;
            type?: MoveStructTag;
            type_str?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("state_key_hash" in data && data.state_key_hash != undefined) {
                    this.state_key_hash = data.state_key_hash;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("type_str" in data && data.type_str != undefined) {
                    this.type_str = data.type_str;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state_key_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set state_key_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, MoveStructTag, 3) as MoveStructTag;
        }
        set type(value: MoveStructTag) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type_str() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type_str(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            state_key_hash?: Uint8Array;
            type?: ReturnType<typeof MoveStructTag.prototype.toObject>;
            type_str?: string;
        }): DeleteResource {
            const message = new DeleteResource({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.state_key_hash != null) {
                message.state_key_hash = data.state_key_hash;
            }
            if (data.type != null) {
                message.type = MoveStructTag.fromObject(data.type);
            }
            if (data.type_str != null) {
                message.type_str = data.type_str;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                state_key_hash?: Uint8Array;
                type?: ReturnType<typeof MoveStructTag.prototype.toObject>;
                type_str?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.state_key_hash != null) {
                data.state_key_hash = this.state_key_hash;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.type_str != null) {
                data.type_str = this.type_str;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.state_key_hash.length)
                writer.writeBytes(2, this.state_key_hash);
            if (this.has_type)
                writer.writeMessage(3, this.type, () => this.type.serialize(writer));
            if (this.type_str.length)
                writer.writeString(4, this.type_str);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.state_key_hash = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.type, () => message.type = MoveStructTag.deserialize(reader));
                        break;
                    case 4:
                        message.type_str = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteResource {
            return DeleteResource.deserialize(bytes);
        }
    }
    export class DeleteTableItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state_key_hash?: Uint8Array;
            handle?: string;
            key?: string;
            data?: DeleteTableData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state_key_hash" in data && data.state_key_hash != undefined) {
                    this.state_key_hash = data.state_key_hash;
                }
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get state_key_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set state_key_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, DeleteTableData, 4) as DeleteTableData;
        }
        set data(value: DeleteTableData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            state_key_hash?: Uint8Array;
            handle?: string;
            key?: string;
            data?: ReturnType<typeof DeleteTableData.prototype.toObject>;
        }): DeleteTableItem {
            const message = new DeleteTableItem({});
            if (data.state_key_hash != null) {
                message.state_key_hash = data.state_key_hash;
            }
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = DeleteTableData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                state_key_hash?: Uint8Array;
                handle?: string;
                key?: string;
                data?: ReturnType<typeof DeleteTableData.prototype.toObject>;
            } = {};
            if (this.state_key_hash != null) {
                data.state_key_hash = this.state_key_hash;
            }
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state_key_hash.length)
                writer.writeBytes(1, this.state_key_hash);
            if (this.handle.length)
                writer.writeString(2, this.handle);
            if (this.key.length)
                writer.writeString(3, this.key);
            if (this.has_data)
                writer.writeMessage(4, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTableItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTableItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state_key_hash = reader.readBytes();
                        break;
                    case 2:
                        message.handle = reader.readString();
                        break;
                    case 3:
                        message.key = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = DeleteTableData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTableItem {
            return DeleteTableItem.deserialize(bytes);
        }
    }
    export class DeleteTableData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            key_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("key_type" in data && data.key_type != undefined) {
                    this.key_type = data.key_type;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: string;
            key_type?: string;
        }): DeleteTableData {
            const message = new DeleteTableData({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.key_type != null) {
                message.key_type = data.key_type;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                key_type?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.key_type != null) {
                data.key_type = this.key_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.key_type.length)
                writer.writeString(2, this.key_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTableData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTableData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.key_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTableData {
            return DeleteTableData.deserialize(bytes);
        }
    }
    export class WriteModule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            state_key_hash?: Uint8Array;
            data?: MoveModuleBytecode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("state_key_hash" in data && data.state_key_hash != undefined) {
                    this.state_key_hash = data.state_key_hash;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state_key_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set state_key_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, MoveModuleBytecode, 3) as MoveModuleBytecode;
        }
        set data(value: MoveModuleBytecode) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            address?: string;
            state_key_hash?: Uint8Array;
            data?: ReturnType<typeof MoveModuleBytecode.prototype.toObject>;
        }): WriteModule {
            const message = new WriteModule({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.state_key_hash != null) {
                message.state_key_hash = data.state_key_hash;
            }
            if (data.data != null) {
                message.data = MoveModuleBytecode.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                state_key_hash?: Uint8Array;
                data?: ReturnType<typeof MoveModuleBytecode.prototype.toObject>;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.state_key_hash != null) {
                data.state_key_hash = this.state_key_hash;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.state_key_hash.length)
                writer.writeBytes(2, this.state_key_hash);
            if (this.has_data)
                writer.writeMessage(3, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteModule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteModule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.state_key_hash = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => message.data = MoveModuleBytecode.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteModule {
            return WriteModule.deserialize(bytes);
        }
    }
    export class WriteResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            state_key_hash?: Uint8Array;
            type?: MoveStructTag;
            type_str?: string;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("state_key_hash" in data && data.state_key_hash != undefined) {
                    this.state_key_hash = data.state_key_hash;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("type_str" in data && data.type_str != undefined) {
                    this.type_str = data.type_str;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state_key_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set state_key_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, MoveStructTag, 3) as MoveStructTag;
        }
        set type(value: MoveStructTag) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type_str() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type_str(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            address?: string;
            state_key_hash?: Uint8Array;
            type?: ReturnType<typeof MoveStructTag.prototype.toObject>;
            type_str?: string;
            data?: string;
        }): WriteResource {
            const message = new WriteResource({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.state_key_hash != null) {
                message.state_key_hash = data.state_key_hash;
            }
            if (data.type != null) {
                message.type = MoveStructTag.fromObject(data.type);
            }
            if (data.type_str != null) {
                message.type_str = data.type_str;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                state_key_hash?: Uint8Array;
                type?: ReturnType<typeof MoveStructTag.prototype.toObject>;
                type_str?: string;
                data?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.state_key_hash != null) {
                data.state_key_hash = this.state_key_hash;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.type_str != null) {
                data.type_str = this.type_str;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.state_key_hash.length)
                writer.writeBytes(2, this.state_key_hash);
            if (this.has_type)
                writer.writeMessage(3, this.type, () => this.type.serialize(writer));
            if (this.type_str.length)
                writer.writeString(4, this.type_str);
            if (this.data.length)
                writer.writeString(5, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.state_key_hash = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.type, () => message.type = MoveStructTag.deserialize(reader));
                        break;
                    case 4:
                        message.type_str = reader.readString();
                        break;
                    case 5:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteResource {
            return WriteResource.deserialize(bytes);
        }
    }
    export class WriteTableData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            key_type?: string;
            value?: string;
            value_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("key_type" in data && data.key_type != undefined) {
                    this.key_type = data.key_type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("value_type" in data && data.value_type != undefined) {
                    this.value_type = data.value_type;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get value_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set value_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: string;
            key_type?: string;
            value?: string;
            value_type?: string;
        }): WriteTableData {
            const message = new WriteTableData({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.key_type != null) {
                message.key_type = data.key_type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.value_type != null) {
                message.value_type = data.value_type;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                key_type?: string;
                value?: string;
                value_type?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.key_type != null) {
                data.key_type = this.key_type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.value_type != null) {
                data.value_type = this.value_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.key_type.length)
                writer.writeString(2, this.key_type);
            if (this.value.length)
                writer.writeString(3, this.value);
            if (this.value_type.length)
                writer.writeString(4, this.value_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteTableData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteTableData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.key_type = reader.readString();
                        break;
                    case 3:
                        message.value = reader.readString();
                        break;
                    case 4:
                        message.value_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteTableData {
            return WriteTableData.deserialize(bytes);
        }
    }
    export class WriteTableItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state_key_hash?: Uint8Array;
            handle?: string;
            key?: string;
            data?: WriteTableData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state_key_hash" in data && data.state_key_hash != undefined) {
                    this.state_key_hash = data.state_key_hash;
                }
                if ("handle" in data && data.handle != undefined) {
                    this.handle = data.handle;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get state_key_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set state_key_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get handle() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set handle(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, WriteTableData, 4) as WriteTableData;
        }
        set data(value: WriteTableData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            state_key_hash?: Uint8Array;
            handle?: string;
            key?: string;
            data?: ReturnType<typeof WriteTableData.prototype.toObject>;
        }): WriteTableItem {
            const message = new WriteTableItem({});
            if (data.state_key_hash != null) {
                message.state_key_hash = data.state_key_hash;
            }
            if (data.handle != null) {
                message.handle = data.handle;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = WriteTableData.fromObject(data.data);
            }
            return message;
        }
        toObject() {
            const data: {
                state_key_hash?: Uint8Array;
                handle?: string;
                key?: string;
                data?: ReturnType<typeof WriteTableData.prototype.toObject>;
            } = {};
            if (this.state_key_hash != null) {
                data.state_key_hash = this.state_key_hash;
            }
            if (this.handle != null) {
                data.handle = this.handle;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state_key_hash.length)
                writer.writeBytes(1, this.state_key_hash);
            if (this.handle.length)
                writer.writeString(2, this.handle);
            if (this.key.length)
                writer.writeString(3, this.key);
            if (this.has_data)
                writer.writeMessage(4, this.data, () => this.data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteTableItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteTableItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state_key_hash = reader.readBytes();
                        break;
                    case 2:
                        message.handle = reader.readString();
                        break;
                    case 3:
                        message.key = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = WriteTableData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteTableItem {
            return WriteTableItem.deserialize(bytes);
        }
    }
    export class TransactionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({
            type?: TransactionPayload.Type;
        } & (({
            entry_function_payload?: EntryFunctionPayload;
            script_payload?: never;
            module_bundle_payload?: never;
            write_set_payload?: never;
            multisig_payload?: never;
        } | {
            entry_function_payload?: never;
            script_payload?: ScriptPayload;
            module_bundle_payload?: never;
            write_set_payload?: never;
            multisig_payload?: never;
        } | {
            entry_function_payload?: never;
            script_payload?: never;
            module_bundle_payload?: ModuleBundlePayload;
            write_set_payload?: never;
            multisig_payload?: never;
        } | {
            entry_function_payload?: never;
            script_payload?: never;
            module_bundle_payload?: never;
            write_set_payload?: WriteSetPayload;
            multisig_payload?: never;
        } | {
            entry_function_payload?: never;
            script_payload?: never;
            module_bundle_payload?: never;
            write_set_payload?: never;
            multisig_payload?: MultisigPayload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("entry_function_payload" in data && data.entry_function_payload != undefined) {
                    this.entry_function_payload = data.entry_function_payload;
                }
                if ("script_payload" in data && data.script_payload != undefined) {
                    this.script_payload = data.script_payload;
                }
                if ("module_bundle_payload" in data && data.module_bundle_payload != undefined) {
                    this.module_bundle_payload = data.module_bundle_payload;
                }
                if ("write_set_payload" in data && data.write_set_payload != undefined) {
                    this.write_set_payload = data.write_set_payload;
                }
                if ("multisig_payload" in data && data.multisig_payload != undefined) {
                    this.multisig_payload = data.multisig_payload;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, TransactionPayload.Type.TYPE_UNSPECIFIED) as TransactionPayload.Type;
        }
        set type(value: TransactionPayload.Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get entry_function_payload() {
            return pb_1.Message.getWrapperField(this, EntryFunctionPayload, 2) as EntryFunctionPayload;
        }
        set entry_function_payload(value: EntryFunctionPayload) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_entry_function_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get script_payload() {
            return pb_1.Message.getWrapperField(this, ScriptPayload, 3) as ScriptPayload;
        }
        set script_payload(value: ScriptPayload) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_script_payload() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get module_bundle_payload() {
            return pb_1.Message.getWrapperField(this, ModuleBundlePayload, 4) as ModuleBundlePayload;
        }
        set module_bundle_payload(value: ModuleBundlePayload) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_module_bundle_payload() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get write_set_payload() {
            return pb_1.Message.getWrapperField(this, WriteSetPayload, 5) as WriteSetPayload;
        }
        set write_set_payload(value: WriteSetPayload) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_write_set_payload() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get multisig_payload() {
            return pb_1.Message.getWrapperField(this, MultisigPayload, 6) as MultisigPayload;
        }
        set multisig_payload(value: MultisigPayload) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_multisig_payload() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "entry_function_payload" | "script_payload" | "module_bundle_payload" | "write_set_payload" | "multisig_payload";
            } = {
                0: "none",
                2: "entry_function_payload",
                3: "script_payload",
                4: "module_bundle_payload",
                5: "write_set_payload",
                6: "multisig_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            type?: TransactionPayload.Type;
            entry_function_payload?: ReturnType<typeof EntryFunctionPayload.prototype.toObject>;
            script_payload?: ReturnType<typeof ScriptPayload.prototype.toObject>;
            module_bundle_payload?: ReturnType<typeof ModuleBundlePayload.prototype.toObject>;
            write_set_payload?: ReturnType<typeof WriteSetPayload.prototype.toObject>;
            multisig_payload?: ReturnType<typeof MultisigPayload.prototype.toObject>;
        }): TransactionPayload {
            const message = new TransactionPayload({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.entry_function_payload != null) {
                message.entry_function_payload = EntryFunctionPayload.fromObject(data.entry_function_payload);
            }
            if (data.script_payload != null) {
                message.script_payload = ScriptPayload.fromObject(data.script_payload);
            }
            if (data.module_bundle_payload != null) {
                message.module_bundle_payload = ModuleBundlePayload.fromObject(data.module_bundle_payload);
            }
            if (data.write_set_payload != null) {
                message.write_set_payload = WriteSetPayload.fromObject(data.write_set_payload);
            }
            if (data.multisig_payload != null) {
                message.multisig_payload = MultisigPayload.fromObject(data.multisig_payload);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: TransactionPayload.Type;
                entry_function_payload?: ReturnType<typeof EntryFunctionPayload.prototype.toObject>;
                script_payload?: ReturnType<typeof ScriptPayload.prototype.toObject>;
                module_bundle_payload?: ReturnType<typeof ModuleBundlePayload.prototype.toObject>;
                write_set_payload?: ReturnType<typeof WriteSetPayload.prototype.toObject>;
                multisig_payload?: ReturnType<typeof MultisigPayload.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.entry_function_payload != null) {
                data.entry_function_payload = this.entry_function_payload.toObject();
            }
            if (this.script_payload != null) {
                data.script_payload = this.script_payload.toObject();
            }
            if (this.module_bundle_payload != null) {
                data.module_bundle_payload = this.module_bundle_payload.toObject();
            }
            if (this.write_set_payload != null) {
                data.write_set_payload = this.write_set_payload.toObject();
            }
            if (this.multisig_payload != null) {
                data.multisig_payload = this.multisig_payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != TransactionPayload.Type.TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.has_entry_function_payload)
                writer.writeMessage(2, this.entry_function_payload, () => this.entry_function_payload.serialize(writer));
            if (this.has_script_payload)
                writer.writeMessage(3, this.script_payload, () => this.script_payload.serialize(writer));
            if (this.has_module_bundle_payload)
                writer.writeMessage(4, this.module_bundle_payload, () => this.module_bundle_payload.serialize(writer));
            if (this.has_write_set_payload)
                writer.writeMessage(5, this.write_set_payload, () => this.write_set_payload.serialize(writer));
            if (this.has_multisig_payload)
                writer.writeMessage(6, this.multisig_payload, () => this.multisig_payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.entry_function_payload, () => message.entry_function_payload = EntryFunctionPayload.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.script_payload, () => message.script_payload = ScriptPayload.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.module_bundle_payload, () => message.module_bundle_payload = ModuleBundlePayload.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.write_set_payload, () => message.write_set_payload = WriteSetPayload.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.multisig_payload, () => message.multisig_payload = MultisigPayload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionPayload {
            return TransactionPayload.deserialize(bytes);
        }
    }
    export namespace TransactionPayload {
        export enum Type {
            TYPE_UNSPECIFIED = 0,
            TYPE_ENTRY_FUNCTION_PAYLOAD = 1,
            TYPE_SCRIPT_PAYLOAD = 2,
            TYPE_MODULE_BUNDLE_PAYLOAD = 3,
            TYPE_WRITE_SET_PAYLOAD = 4,
            TYPE_MULTISIG_PAYLOAD = 5
        }
    }
    export class EntryFunctionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            function?: EntryFunctionId;
            type_arguments?: MoveType[];
            arguments?: string[];
            entry_function_id_str?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("function" in data && data.function != undefined) {
                    this.function = data.function;
                }
                if ("type_arguments" in data && data.type_arguments != undefined) {
                    this.type_arguments = data.type_arguments;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
                if ("entry_function_id_str" in data && data.entry_function_id_str != undefined) {
                    this.entry_function_id_str = data.entry_function_id_str;
                }
            }
        }
        get function() {
            return pb_1.Message.getWrapperField(this, EntryFunctionId, 1) as EntryFunctionId;
        }
        set function(value: EntryFunctionId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_function() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type_arguments() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveType, 2) as MoveType[];
        }
        set type_arguments(value: MoveType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set arguments(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get entry_function_id_str() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set entry_function_id_str(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            function?: ReturnType<typeof EntryFunctionId.prototype.toObject>;
            type_arguments?: ReturnType<typeof MoveType.prototype.toObject>[];
            arguments?: string[];
            entry_function_id_str?: string;
        }): EntryFunctionPayload {
            const message = new EntryFunctionPayload({});
            if (data.function != null) {
                message.function = EntryFunctionId.fromObject(data.function);
            }
            if (data.type_arguments != null) {
                message.type_arguments = data.type_arguments.map(item => MoveType.fromObject(item));
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            if (data.entry_function_id_str != null) {
                message.entry_function_id_str = data.entry_function_id_str;
            }
            return message;
        }
        toObject() {
            const data: {
                function?: ReturnType<typeof EntryFunctionId.prototype.toObject>;
                type_arguments?: ReturnType<typeof MoveType.prototype.toObject>[];
                arguments?: string[];
                entry_function_id_str?: string;
            } = {};
            if (this.function != null) {
                data.function = this.function.toObject();
            }
            if (this.type_arguments != null) {
                data.type_arguments = this.type_arguments.map((item: MoveType) => item.toObject());
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            if (this.entry_function_id_str != null) {
                data.entry_function_id_str = this.entry_function_id_str;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_function)
                writer.writeMessage(1, this.function, () => this.function.serialize(writer));
            if (this.type_arguments.length)
                writer.writeRepeatedMessage(2, this.type_arguments, (item: MoveType) => item.serialize(writer));
            if (this.arguments.length)
                writer.writeRepeatedString(3, this.arguments);
            if (this.entry_function_id_str.length)
                writer.writeString(4, this.entry_function_id_str);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntryFunctionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntryFunctionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.function, () => message.function = EntryFunctionId.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.type_arguments, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MoveType.deserialize(reader), MoveType));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.entry_function_id_str = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntryFunctionPayload {
            return EntryFunctionPayload.deserialize(bytes);
        }
    }
    export class MoveScriptBytecode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bytecode?: Uint8Array;
            abi?: MoveFunction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bytecode" in data && data.bytecode != undefined) {
                    this.bytecode = data.bytecode;
                }
                if ("abi" in data && data.abi != undefined) {
                    this.abi = data.abi;
                }
            }
        }
        get bytecode() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set bytecode(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get abi() {
            return pb_1.Message.getWrapperField(this, MoveFunction, 2) as MoveFunction;
        }
        set abi(value: MoveFunction) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_abi() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            bytecode?: Uint8Array;
            abi?: ReturnType<typeof MoveFunction.prototype.toObject>;
        }): MoveScriptBytecode {
            const message = new MoveScriptBytecode({});
            if (data.bytecode != null) {
                message.bytecode = data.bytecode;
            }
            if (data.abi != null) {
                message.abi = MoveFunction.fromObject(data.abi);
            }
            return message;
        }
        toObject() {
            const data: {
                bytecode?: Uint8Array;
                abi?: ReturnType<typeof MoveFunction.prototype.toObject>;
            } = {};
            if (this.bytecode != null) {
                data.bytecode = this.bytecode;
            }
            if (this.abi != null) {
                data.abi = this.abi.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bytecode.length)
                writer.writeBytes(1, this.bytecode);
            if (this.has_abi)
                writer.writeMessage(2, this.abi, () => this.abi.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveScriptBytecode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveScriptBytecode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bytecode = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.abi, () => message.abi = MoveFunction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveScriptBytecode {
            return MoveScriptBytecode.deserialize(bytes);
        }
    }
    export class ScriptPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: MoveScriptBytecode;
            type_arguments?: MoveType[];
            arguments?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("type_arguments" in data && data.type_arguments != undefined) {
                    this.type_arguments = data.type_arguments;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
            }
        }
        get code() {
            return pb_1.Message.getWrapperField(this, MoveScriptBytecode, 1) as MoveScriptBytecode;
        }
        set code(value: MoveScriptBytecode) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_code() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type_arguments() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveType, 2) as MoveType[];
        }
        set type_arguments(value: MoveType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set arguments(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            code?: ReturnType<typeof MoveScriptBytecode.prototype.toObject>;
            type_arguments?: ReturnType<typeof MoveType.prototype.toObject>[];
            arguments?: string[];
        }): ScriptPayload {
            const message = new ScriptPayload({});
            if (data.code != null) {
                message.code = MoveScriptBytecode.fromObject(data.code);
            }
            if (data.type_arguments != null) {
                message.type_arguments = data.type_arguments.map(item => MoveType.fromObject(item));
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: ReturnType<typeof MoveScriptBytecode.prototype.toObject>;
                type_arguments?: ReturnType<typeof MoveType.prototype.toObject>[];
                arguments?: string[];
            } = {};
            if (this.code != null) {
                data.code = this.code.toObject();
            }
            if (this.type_arguments != null) {
                data.type_arguments = this.type_arguments.map((item: MoveType) => item.toObject());
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_code)
                writer.writeMessage(1, this.code, () => this.code.serialize(writer));
            if (this.type_arguments.length)
                writer.writeRepeatedMessage(2, this.type_arguments, (item: MoveType) => item.serialize(writer));
            if (this.arguments.length)
                writer.writeRepeatedString(3, this.arguments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScriptPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScriptPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.code, () => message.code = MoveScriptBytecode.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.type_arguments, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MoveType.deserialize(reader), MoveType));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScriptPayload {
            return ScriptPayload.deserialize(bytes);
        }
    }
    export class MultisigPayload extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            multisig_address?: string;
        } & (({
            transaction_payload?: MultisigTransactionPayload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("multisig_address" in data && data.multisig_address != undefined) {
                    this.multisig_address = data.multisig_address;
                }
                if ("transaction_payload" in data && data.transaction_payload != undefined) {
                    this.transaction_payload = data.transaction_payload;
                }
            }
        }
        get multisig_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set multisig_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get transaction_payload() {
            return pb_1.Message.getWrapperField(this, MultisigTransactionPayload, 2) as MultisigTransactionPayload;
        }
        set transaction_payload(value: MultisigTransactionPayload) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_transaction_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _transaction_payload() {
            const cases: {
                [index: number]: "none" | "transaction_payload";
            } = {
                0: "none",
                2: "transaction_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            multisig_address?: string;
            transaction_payload?: ReturnType<typeof MultisigTransactionPayload.prototype.toObject>;
        }): MultisigPayload {
            const message = new MultisigPayload({});
            if (data.multisig_address != null) {
                message.multisig_address = data.multisig_address;
            }
            if (data.transaction_payload != null) {
                message.transaction_payload = MultisigTransactionPayload.fromObject(data.transaction_payload);
            }
            return message;
        }
        toObject() {
            const data: {
                multisig_address?: string;
                transaction_payload?: ReturnType<typeof MultisigTransactionPayload.prototype.toObject>;
            } = {};
            if (this.multisig_address != null) {
                data.multisig_address = this.multisig_address;
            }
            if (this.transaction_payload != null) {
                data.transaction_payload = this.transaction_payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.multisig_address.length)
                writer.writeString(1, this.multisig_address);
            if (this.has_transaction_payload)
                writer.writeMessage(2, this.transaction_payload, () => this.transaction_payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultisigPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultisigPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.multisig_address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.transaction_payload, () => message.transaction_payload = MultisigTransactionPayload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultisigPayload {
            return MultisigPayload.deserialize(bytes);
        }
    }
    export class MultisigTransactionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            type?: MultisigTransactionPayload.Type;
        } & (({
            entry_function_payload?: EntryFunctionPayload;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("entry_function_payload" in data && data.entry_function_payload != undefined) {
                    this.entry_function_payload = data.entry_function_payload;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, MultisigTransactionPayload.Type.TYPE_UNSPECIFIED) as MultisigTransactionPayload.Type;
        }
        set type(value: MultisigTransactionPayload.Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get entry_function_payload() {
            return pb_1.Message.getWrapperField(this, EntryFunctionPayload, 2) as EntryFunctionPayload;
        }
        set entry_function_payload(value: EntryFunctionPayload) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_entry_function_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "entry_function_payload";
            } = {
                0: "none",
                2: "entry_function_payload"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            type?: MultisigTransactionPayload.Type;
            entry_function_payload?: ReturnType<typeof EntryFunctionPayload.prototype.toObject>;
        }): MultisigTransactionPayload {
            const message = new MultisigTransactionPayload({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.entry_function_payload != null) {
                message.entry_function_payload = EntryFunctionPayload.fromObject(data.entry_function_payload);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: MultisigTransactionPayload.Type;
                entry_function_payload?: ReturnType<typeof EntryFunctionPayload.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.entry_function_payload != null) {
                data.entry_function_payload = this.entry_function_payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != MultisigTransactionPayload.Type.TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.has_entry_function_payload)
                writer.writeMessage(2, this.entry_function_payload, () => this.entry_function_payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultisigTransactionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultisigTransactionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.entry_function_payload, () => message.entry_function_payload = EntryFunctionPayload.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultisigTransactionPayload {
            return MultisigTransactionPayload.deserialize(bytes);
        }
    }
    export namespace MultisigTransactionPayload {
        export enum Type {
            TYPE_UNSPECIFIED = 0,
            TYPE_ENTRY_FUNCTION_PAYLOAD = 1
        }
    }
    export class ModuleBundlePayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            modules?: MoveModuleBytecode[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("modules" in data && data.modules != undefined) {
                    this.modules = data.modules;
                }
            }
        }
        get modules() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveModuleBytecode, 1) as MoveModuleBytecode[];
        }
        set modules(value: MoveModuleBytecode[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            modules?: ReturnType<typeof MoveModuleBytecode.prototype.toObject>[];
        }): ModuleBundlePayload {
            const message = new ModuleBundlePayload({});
            if (data.modules != null) {
                message.modules = data.modules.map(item => MoveModuleBytecode.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                modules?: ReturnType<typeof MoveModuleBytecode.prototype.toObject>[];
            } = {};
            if (this.modules != null) {
                data.modules = this.modules.map((item: MoveModuleBytecode) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.modules.length)
                writer.writeRepeatedMessage(1, this.modules, (item: MoveModuleBytecode) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModuleBundlePayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModuleBundlePayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.modules, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MoveModuleBytecode.deserialize(reader), MoveModuleBytecode));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ModuleBundlePayload {
            return ModuleBundlePayload.deserialize(bytes);
        }
    }
    export class MoveModuleBytecode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bytecode?: Uint8Array;
            abi?: MoveModule;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bytecode" in data && data.bytecode != undefined) {
                    this.bytecode = data.bytecode;
                }
                if ("abi" in data && data.abi != undefined) {
                    this.abi = data.abi;
                }
            }
        }
        get bytecode() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set bytecode(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get abi() {
            return pb_1.Message.getWrapperField(this, MoveModule, 2) as MoveModule;
        }
        set abi(value: MoveModule) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_abi() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            bytecode?: Uint8Array;
            abi?: ReturnType<typeof MoveModule.prototype.toObject>;
        }): MoveModuleBytecode {
            const message = new MoveModuleBytecode({});
            if (data.bytecode != null) {
                message.bytecode = data.bytecode;
            }
            if (data.abi != null) {
                message.abi = MoveModule.fromObject(data.abi);
            }
            return message;
        }
        toObject() {
            const data: {
                bytecode?: Uint8Array;
                abi?: ReturnType<typeof MoveModule.prototype.toObject>;
            } = {};
            if (this.bytecode != null) {
                data.bytecode = this.bytecode;
            }
            if (this.abi != null) {
                data.abi = this.abi.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bytecode.length)
                writer.writeBytes(1, this.bytecode);
            if (this.has_abi)
                writer.writeMessage(2, this.abi, () => this.abi.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveModuleBytecode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveModuleBytecode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bytecode = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.abi, () => message.abi = MoveModule.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveModuleBytecode {
            return MoveModuleBytecode.deserialize(bytes);
        }
    }
    export class MoveModule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            name?: string;
            friends?: MoveModuleId[];
            exposed_functions?: MoveFunction[];
            structs?: MoveStruct[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("friends" in data && data.friends != undefined) {
                    this.friends = data.friends;
                }
                if ("exposed_functions" in data && data.exposed_functions != undefined) {
                    this.exposed_functions = data.exposed_functions;
                }
                if ("structs" in data && data.structs != undefined) {
                    this.structs = data.structs;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get friends() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveModuleId, 3) as MoveModuleId[];
        }
        set friends(value: MoveModuleId[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get exposed_functions() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveFunction, 4) as MoveFunction[];
        }
        set exposed_functions(value: MoveFunction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get structs() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveStruct, 5) as MoveStruct[];
        }
        set structs(value: MoveStruct[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            address?: string;
            name?: string;
            friends?: ReturnType<typeof MoveModuleId.prototype.toObject>[];
            exposed_functions?: ReturnType<typeof MoveFunction.prototype.toObject>[];
            structs?: ReturnType<typeof MoveStruct.prototype.toObject>[];
        }): MoveModule {
            const message = new MoveModule({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.friends != null) {
                message.friends = data.friends.map(item => MoveModuleId.fromObject(item));
            }
            if (data.exposed_functions != null) {
                message.exposed_functions = data.exposed_functions.map(item => MoveFunction.fromObject(item));
            }
            if (data.structs != null) {
                message.structs = data.structs.map(item => MoveStruct.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                name?: string;
                friends?: ReturnType<typeof MoveModuleId.prototype.toObject>[];
                exposed_functions?: ReturnType<typeof MoveFunction.prototype.toObject>[];
                structs?: ReturnType<typeof MoveStruct.prototype.toObject>[];
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.friends != null) {
                data.friends = this.friends.map((item: MoveModuleId) => item.toObject());
            }
            if (this.exposed_functions != null) {
                data.exposed_functions = this.exposed_functions.map((item: MoveFunction) => item.toObject());
            }
            if (this.structs != null) {
                data.structs = this.structs.map((item: MoveStruct) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.friends.length)
                writer.writeRepeatedMessage(3, this.friends, (item: MoveModuleId) => item.serialize(writer));
            if (this.exposed_functions.length)
                writer.writeRepeatedMessage(4, this.exposed_functions, (item: MoveFunction) => item.serialize(writer));
            if (this.structs.length)
                writer.writeRepeatedMessage(5, this.structs, (item: MoveStruct) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveModule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveModule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.friends, () => pb_1.Message.addToRepeatedWrapperField(message, 3, MoveModuleId.deserialize(reader), MoveModuleId));
                        break;
                    case 4:
                        reader.readMessage(message.exposed_functions, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MoveFunction.deserialize(reader), MoveFunction));
                        break;
                    case 5:
                        reader.readMessage(message.structs, () => pb_1.Message.addToRepeatedWrapperField(message, 5, MoveStruct.deserialize(reader), MoveStruct));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveModule {
            return MoveModule.deserialize(bytes);
        }
    }
    export class MoveFunction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            visibility?: MoveFunction.Visibility;
            is_entry?: boolean;
            generic_type_params?: MoveFunctionGenericTypeParam[];
            params?: MoveType[];
            return?: MoveType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("visibility" in data && data.visibility != undefined) {
                    this.visibility = data.visibility;
                }
                if ("is_entry" in data && data.is_entry != undefined) {
                    this.is_entry = data.is_entry;
                }
                if ("generic_type_params" in data && data.generic_type_params != undefined) {
                    this.generic_type_params = data.generic_type_params;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("return" in data && data.return != undefined) {
                    this.return = data.return;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get visibility() {
            return pb_1.Message.getFieldWithDefault(this, 2, MoveFunction.Visibility.VISIBILITY_UNSPECIFIED) as MoveFunction.Visibility;
        }
        set visibility(value: MoveFunction.Visibility) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_entry() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_entry(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get generic_type_params() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveFunctionGenericTypeParam, 4) as MoveFunctionGenericTypeParam[];
        }
        set generic_type_params(value: MoveFunctionGenericTypeParam[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get params() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveType, 5) as MoveType[];
        }
        set params(value: MoveType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get return() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveType, 6) as MoveType[];
        }
        set return(value: MoveType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            visibility?: MoveFunction.Visibility;
            is_entry?: boolean;
            generic_type_params?: ReturnType<typeof MoveFunctionGenericTypeParam.prototype.toObject>[];
            params?: ReturnType<typeof MoveType.prototype.toObject>[];
            return?: ReturnType<typeof MoveType.prototype.toObject>[];
        }): MoveFunction {
            const message = new MoveFunction({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.visibility != null) {
                message.visibility = data.visibility;
            }
            if (data.is_entry != null) {
                message.is_entry = data.is_entry;
            }
            if (data.generic_type_params != null) {
                message.generic_type_params = data.generic_type_params.map(item => MoveFunctionGenericTypeParam.fromObject(item));
            }
            if (data.params != null) {
                message.params = data.params.map(item => MoveType.fromObject(item));
            }
            if (data.return != null) {
                message.return = data.return.map(item => MoveType.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                visibility?: MoveFunction.Visibility;
                is_entry?: boolean;
                generic_type_params?: ReturnType<typeof MoveFunctionGenericTypeParam.prototype.toObject>[];
                params?: ReturnType<typeof MoveType.prototype.toObject>[];
                return?: ReturnType<typeof MoveType.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.visibility != null) {
                data.visibility = this.visibility;
            }
            if (this.is_entry != null) {
                data.is_entry = this.is_entry;
            }
            if (this.generic_type_params != null) {
                data.generic_type_params = this.generic_type_params.map((item: MoveFunctionGenericTypeParam) => item.toObject());
            }
            if (this.params != null) {
                data.params = this.params.map((item: MoveType) => item.toObject());
            }
            if (this.return != null) {
                data.return = this.return.map((item: MoveType) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.visibility != MoveFunction.Visibility.VISIBILITY_UNSPECIFIED)
                writer.writeEnum(2, this.visibility);
            if (this.is_entry != false)
                writer.writeBool(3, this.is_entry);
            if (this.generic_type_params.length)
                writer.writeRepeatedMessage(4, this.generic_type_params, (item: MoveFunctionGenericTypeParam) => item.serialize(writer));
            if (this.params.length)
                writer.writeRepeatedMessage(5, this.params, (item: MoveType) => item.serialize(writer));
            if (this.return.length)
                writer.writeRepeatedMessage(6, this.return, (item: MoveType) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveFunction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveFunction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.visibility = reader.readEnum();
                        break;
                    case 3:
                        message.is_entry = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.generic_type_params, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MoveFunctionGenericTypeParam.deserialize(reader), MoveFunctionGenericTypeParam));
                        break;
                    case 5:
                        reader.readMessage(message.params, () => pb_1.Message.addToRepeatedWrapperField(message, 5, MoveType.deserialize(reader), MoveType));
                        break;
                    case 6:
                        reader.readMessage(message.return, () => pb_1.Message.addToRepeatedWrapperField(message, 6, MoveType.deserialize(reader), MoveType));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveFunction {
            return MoveFunction.deserialize(bytes);
        }
    }
    export namespace MoveFunction {
        export enum Visibility {
            VISIBILITY_UNSPECIFIED = 0,
            VISIBILITY_PRIVATE = 1,
            VISIBILITY_PUBLIC = 2,
            VISIBILITY_FRIEND = 3
        }
    }
    export class MoveStruct extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            is_native?: boolean;
            abilities?: MoveAbility[];
            generic_type_params?: MoveStructGenericTypeParam[];
            fields?: MoveStructField[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("is_native" in data && data.is_native != undefined) {
                    this.is_native = data.is_native;
                }
                if ("abilities" in data && data.abilities != undefined) {
                    this.abilities = data.abilities;
                }
                if ("generic_type_params" in data && data.generic_type_params != undefined) {
                    this.generic_type_params = data.generic_type_params;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_native() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_native(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get abilities() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as MoveAbility[];
        }
        set abilities(value: MoveAbility[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get generic_type_params() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveStructGenericTypeParam, 4) as MoveStructGenericTypeParam[];
        }
        set generic_type_params(value: MoveStructGenericTypeParam[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get fields() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveStructField, 5) as MoveStructField[];
        }
        set fields(value: MoveStructField[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            is_native?: boolean;
            abilities?: MoveAbility[];
            generic_type_params?: ReturnType<typeof MoveStructGenericTypeParam.prototype.toObject>[];
            fields?: ReturnType<typeof MoveStructField.prototype.toObject>[];
        }): MoveStruct {
            const message = new MoveStruct({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.is_native != null) {
                message.is_native = data.is_native;
            }
            if (data.abilities != null) {
                message.abilities = data.abilities;
            }
            if (data.generic_type_params != null) {
                message.generic_type_params = data.generic_type_params.map(item => MoveStructGenericTypeParam.fromObject(item));
            }
            if (data.fields != null) {
                message.fields = data.fields.map(item => MoveStructField.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                is_native?: boolean;
                abilities?: MoveAbility[];
                generic_type_params?: ReturnType<typeof MoveStructGenericTypeParam.prototype.toObject>[];
                fields?: ReturnType<typeof MoveStructField.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.is_native != null) {
                data.is_native = this.is_native;
            }
            if (this.abilities != null) {
                data.abilities = this.abilities;
            }
            if (this.generic_type_params != null) {
                data.generic_type_params = this.generic_type_params.map((item: MoveStructGenericTypeParam) => item.toObject());
            }
            if (this.fields != null) {
                data.fields = this.fields.map((item: MoveStructField) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.is_native != false)
                writer.writeBool(2, this.is_native);
            if (this.abilities.length)
                writer.writePackedEnum(3, this.abilities);
            if (this.generic_type_params.length)
                writer.writeRepeatedMessage(4, this.generic_type_params, (item: MoveStructGenericTypeParam) => item.serialize(writer));
            if (this.fields.length)
                writer.writeRepeatedMessage(5, this.fields, (item: MoveStructField) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveStruct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveStruct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.is_native = reader.readBool();
                        break;
                    case 3:
                        message.abilities = reader.readPackedEnum();
                        break;
                    case 4:
                        reader.readMessage(message.generic_type_params, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MoveStructGenericTypeParam.deserialize(reader), MoveStructGenericTypeParam));
                        break;
                    case 5:
                        reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 5, MoveStructField.deserialize(reader), MoveStructField));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveStruct {
            return MoveStruct.deserialize(bytes);
        }
    }
    export class MoveStructGenericTypeParam extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            constraints?: MoveAbility[];
            is_phantom?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("constraints" in data && data.constraints != undefined) {
                    this.constraints = data.constraints;
                }
                if ("is_phantom" in data && data.is_phantom != undefined) {
                    this.is_phantom = data.is_phantom;
                }
            }
        }
        get constraints() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as MoveAbility[];
        }
        set constraints(value: MoveAbility[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_phantom() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_phantom(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            constraints?: MoveAbility[];
            is_phantom?: boolean;
        }): MoveStructGenericTypeParam {
            const message = new MoveStructGenericTypeParam({});
            if (data.constraints != null) {
                message.constraints = data.constraints;
            }
            if (data.is_phantom != null) {
                message.is_phantom = data.is_phantom;
            }
            return message;
        }
        toObject() {
            const data: {
                constraints?: MoveAbility[];
                is_phantom?: boolean;
            } = {};
            if (this.constraints != null) {
                data.constraints = this.constraints;
            }
            if (this.is_phantom != null) {
                data.is_phantom = this.is_phantom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.constraints.length)
                writer.writePackedEnum(1, this.constraints);
            if (this.is_phantom != false)
                writer.writeBool(2, this.is_phantom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveStructGenericTypeParam {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveStructGenericTypeParam();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.constraints = reader.readPackedEnum();
                        break;
                    case 2:
                        message.is_phantom = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveStructGenericTypeParam {
            return MoveStructGenericTypeParam.deserialize(bytes);
        }
    }
    export class MoveStructField extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: MoveType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, MoveType, 2) as MoveType;
        }
        set type(value: MoveType) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            type?: ReturnType<typeof MoveType.prototype.toObject>;
        }): MoveStructField {
            const message = new MoveStructField({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = MoveType.fromObject(data.type);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: ReturnType<typeof MoveType.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_type)
                writer.writeMessage(2, this.type, () => this.type.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveStructField {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveStructField();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.type, () => message.type = MoveType.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveStructField {
            return MoveStructField.deserialize(bytes);
        }
    }
    export class MoveFunctionGenericTypeParam extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            constraints?: MoveAbility[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("constraints" in data && data.constraints != undefined) {
                    this.constraints = data.constraints;
                }
            }
        }
        get constraints() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as MoveAbility[];
        }
        set constraints(value: MoveAbility[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            constraints?: MoveAbility[];
        }): MoveFunctionGenericTypeParam {
            const message = new MoveFunctionGenericTypeParam({});
            if (data.constraints != null) {
                message.constraints = data.constraints;
            }
            return message;
        }
        toObject() {
            const data: {
                constraints?: MoveAbility[];
            } = {};
            if (this.constraints != null) {
                data.constraints = this.constraints;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.constraints.length)
                writer.writePackedEnum(1, this.constraints);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveFunctionGenericTypeParam {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveFunctionGenericTypeParam();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.constraints = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveFunctionGenericTypeParam {
            return MoveFunctionGenericTypeParam.deserialize(bytes);
        }
    }
    export class MoveType extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({
            type?: MoveTypes;
        } & (({
            vector?: MoveType;
            struct?: never;
            generic_type_param_index?: never;
            reference?: never;
            unparsable?: never;
        } | {
            vector?: never;
            struct?: MoveStructTag;
            generic_type_param_index?: never;
            reference?: never;
            unparsable?: never;
        } | {
            vector?: never;
            struct?: never;
            generic_type_param_index?: number;
            reference?: never;
            unparsable?: never;
        } | {
            vector?: never;
            struct?: never;
            generic_type_param_index?: never;
            reference?: MoveType.ReferenceType;
            unparsable?: never;
        } | {
            vector?: never;
            struct?: never;
            generic_type_param_index?: never;
            reference?: never;
            unparsable?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("vector" in data && data.vector != undefined) {
                    this.vector = data.vector;
                }
                if ("struct" in data && data.struct != undefined) {
                    this.struct = data.struct;
                }
                if ("generic_type_param_index" in data && data.generic_type_param_index != undefined) {
                    this.generic_type_param_index = data.generic_type_param_index;
                }
                if ("reference" in data && data.reference != undefined) {
                    this.reference = data.reference;
                }
                if ("unparsable" in data && data.unparsable != undefined) {
                    this.unparsable = data.unparsable;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, MoveTypes.MOVE_TYPES_UNSPECIFIED) as MoveTypes;
        }
        set type(value: MoveTypes) {
            pb_1.Message.setField(this, 1, value);
        }
        get vector() {
            return pb_1.Message.getWrapperField(this, MoveType, 3) as MoveType;
        }
        set vector(value: MoveType) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_vector() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get struct() {
            return pb_1.Message.getWrapperField(this, MoveStructTag, 4) as MoveStructTag;
        }
        set struct(value: MoveStructTag) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_struct() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get generic_type_param_index() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set generic_type_param_index(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_generic_type_param_index() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get reference() {
            return pb_1.Message.getWrapperField(this, MoveType.ReferenceType, 6) as MoveType.ReferenceType;
        }
        set reference(value: MoveType.ReferenceType) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_reference() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get unparsable() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set unparsable(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_unparsable() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get content() {
            const cases: {
                [index: number]: "none" | "vector" | "struct" | "generic_type_param_index" | "reference" | "unparsable";
            } = {
                0: "none",
                3: "vector",
                4: "struct",
                5: "generic_type_param_index",
                6: "reference",
                7: "unparsable"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            type?: MoveTypes;
            vector?: ReturnType<typeof MoveType.prototype.toObject>;
            struct?: ReturnType<typeof MoveStructTag.prototype.toObject>;
            generic_type_param_index?: number;
            reference?: ReturnType<typeof MoveType.ReferenceType.prototype.toObject>;
            unparsable?: string;
        }): MoveType {
            const message = new MoveType({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.vector != null) {
                message.vector = MoveType.fromObject(data.vector);
            }
            if (data.struct != null) {
                message.struct = MoveStructTag.fromObject(data.struct);
            }
            if (data.generic_type_param_index != null) {
                message.generic_type_param_index = data.generic_type_param_index;
            }
            if (data.reference != null) {
                message.reference = MoveType.ReferenceType.fromObject(data.reference);
            }
            if (data.unparsable != null) {
                message.unparsable = data.unparsable;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: MoveTypes;
                vector?: ReturnType<typeof MoveType.prototype.toObject>;
                struct?: ReturnType<typeof MoveStructTag.prototype.toObject>;
                generic_type_param_index?: number;
                reference?: ReturnType<typeof MoveType.ReferenceType.prototype.toObject>;
                unparsable?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.vector != null) {
                data.vector = this.vector.toObject();
            }
            if (this.struct != null) {
                data.struct = this.struct.toObject();
            }
            if (this.generic_type_param_index != null) {
                data.generic_type_param_index = this.generic_type_param_index;
            }
            if (this.reference != null) {
                data.reference = this.reference.toObject();
            }
            if (this.unparsable != null) {
                data.unparsable = this.unparsable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != MoveTypes.MOVE_TYPES_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.has_vector)
                writer.writeMessage(3, this.vector, () => this.vector.serialize(writer));
            if (this.has_struct)
                writer.writeMessage(4, this.struct, () => this.struct.serialize(writer));
            if (this.has_generic_type_param_index)
                writer.writeUint32(5, this.generic_type_param_index);
            if (this.has_reference)
                writer.writeMessage(6, this.reference, () => this.reference.serialize(writer));
            if (this.has_unparsable)
                writer.writeString(7, this.unparsable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.vector, () => message.vector = MoveType.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.struct, () => message.struct = MoveStructTag.deserialize(reader));
                        break;
                    case 5:
                        message.generic_type_param_index = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.reference, () => message.reference = MoveType.ReferenceType.deserialize(reader));
                        break;
                    case 7:
                        message.unparsable = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveType {
            return MoveType.deserialize(bytes);
        }
    }
    export namespace MoveType {
        export class ReferenceType extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                mutable?: boolean;
                to?: MoveType;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("mutable" in data && data.mutable != undefined) {
                        this.mutable = data.mutable;
                    }
                    if ("to" in data && data.to != undefined) {
                        this.to = data.to;
                    }
                }
            }
            get mutable() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set mutable(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get to() {
                return pb_1.Message.getWrapperField(this, MoveType, 2) as MoveType;
            }
            set to(value: MoveType) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_to() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                mutable?: boolean;
                to?: ReturnType<typeof MoveType.prototype.toObject>;
            }): ReferenceType {
                const message = new ReferenceType({});
                if (data.mutable != null) {
                    message.mutable = data.mutable;
                }
                if (data.to != null) {
                    message.to = MoveType.fromObject(data.to);
                }
                return message;
            }
            toObject() {
                const data: {
                    mutable?: boolean;
                    to?: ReturnType<typeof MoveType.prototype.toObject>;
                } = {};
                if (this.mutable != null) {
                    data.mutable = this.mutable;
                }
                if (this.to != null) {
                    data.to = this.to.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.mutable != false)
                    writer.writeBool(1, this.mutable);
                if (this.has_to)
                    writer.writeMessage(2, this.to, () => this.to.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReferenceType {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReferenceType();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.mutable = reader.readBool();
                            break;
                        case 2:
                            reader.readMessage(message.to, () => message.to = MoveType.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ReferenceType {
                return ReferenceType.deserialize(bytes);
            }
        }
    }
    export class WriteSetPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            write_set?: WriteSet;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("write_set" in data && data.write_set != undefined) {
                    this.write_set = data.write_set;
                }
            }
        }
        get write_set() {
            return pb_1.Message.getWrapperField(this, WriteSet, 1) as WriteSet;
        }
        set write_set(value: WriteSet) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_write_set() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            write_set?: ReturnType<typeof WriteSet.prototype.toObject>;
        }): WriteSetPayload {
            const message = new WriteSetPayload({});
            if (data.write_set != null) {
                message.write_set = WriteSet.fromObject(data.write_set);
            }
            return message;
        }
        toObject() {
            const data: {
                write_set?: ReturnType<typeof WriteSet.prototype.toObject>;
            } = {};
            if (this.write_set != null) {
                data.write_set = this.write_set.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_write_set)
                writer.writeMessage(1, this.write_set, () => this.write_set.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteSetPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteSetPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.write_set, () => message.write_set = WriteSet.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteSetPayload {
            return WriteSetPayload.deserialize(bytes);
        }
    }
    export class EntryFunctionId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            module?: MoveModuleId;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get module() {
            return pb_1.Message.getWrapperField(this, MoveModuleId, 1) as MoveModuleId;
        }
        set module(value: MoveModuleId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_module() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            module?: ReturnType<typeof MoveModuleId.prototype.toObject>;
            name?: string;
        }): EntryFunctionId {
            const message = new EntryFunctionId({});
            if (data.module != null) {
                message.module = MoveModuleId.fromObject(data.module);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                module?: ReturnType<typeof MoveModuleId.prototype.toObject>;
                name?: string;
            } = {};
            if (this.module != null) {
                data.module = this.module.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_module)
                writer.writeMessage(1, this.module, () => this.module.serialize(writer));
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntryFunctionId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntryFunctionId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.module, () => message.module = MoveModuleId.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntryFunctionId {
            return EntryFunctionId.deserialize(bytes);
        }
    }
    export class MoveModuleId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            name?: string;
        }): MoveModuleId {
            const message = new MoveModuleId({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                name?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveModuleId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveModuleId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveModuleId {
            return MoveModuleId.deserialize(bytes);
        }
    }
    export class MoveStructTag extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            module?: string;
            name?: string;
            generic_type_params?: MoveType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("generic_type_params" in data && data.generic_type_params != undefined) {
                    this.generic_type_params = data.generic_type_params;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get generic_type_params() {
            return pb_1.Message.getRepeatedWrapperField(this, MoveType, 4) as MoveType[];
        }
        set generic_type_params(value: MoveType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            address?: string;
            module?: string;
            name?: string;
            generic_type_params?: ReturnType<typeof MoveType.prototype.toObject>[];
        }): MoveStructTag {
            const message = new MoveStructTag({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.generic_type_params != null) {
                message.generic_type_params = data.generic_type_params.map(item => MoveType.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                module?: string;
                name?: string;
                generic_type_params?: ReturnType<typeof MoveType.prototype.toObject>[];
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.generic_type_params != null) {
                data.generic_type_params = this.generic_type_params.map((item: MoveType) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.module.length)
                writer.writeString(2, this.module);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.generic_type_params.length)
                writer.writeRepeatedMessage(4, this.generic_type_params, (item: MoveType) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveStructTag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveStructTag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.module = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.generic_type_params, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MoveType.deserialize(reader), MoveType));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoveStructTag {
            return MoveStructTag.deserialize(bytes);
        }
    }
    export class Signature extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5]];
        constructor(data?: any[] | ({
            type?: Signature.Type;
        } & (({
            ed25519?: Ed25519Signature;
            multi_ed25519?: never;
            multi_agent?: never;
            fee_payer?: never;
        } | {
            ed25519?: never;
            multi_ed25519?: MultiEd25519Signature;
            multi_agent?: never;
            fee_payer?: never;
        } | {
            ed25519?: never;
            multi_ed25519?: never;
            multi_agent?: MultiAgentSignature;
            fee_payer?: never;
        } | {
            ed25519?: never;
            multi_ed25519?: never;
            multi_agent?: never;
            fee_payer?: FeePayerSignature;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("ed25519" in data && data.ed25519 != undefined) {
                    this.ed25519 = data.ed25519;
                }
                if ("multi_ed25519" in data && data.multi_ed25519 != undefined) {
                    this.multi_ed25519 = data.multi_ed25519;
                }
                if ("multi_agent" in data && data.multi_agent != undefined) {
                    this.multi_agent = data.multi_agent;
                }
                if ("fee_payer" in data && data.fee_payer != undefined) {
                    this.fee_payer = data.fee_payer;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, Signature.Type.TYPE_UNSPECIFIED) as Signature.Type;
        }
        set type(value: Signature.Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get ed25519() {
            return pb_1.Message.getWrapperField(this, Ed25519Signature, 2) as Ed25519Signature;
        }
        set ed25519(value: Ed25519Signature) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ed25519() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get multi_ed25519() {
            return pb_1.Message.getWrapperField(this, MultiEd25519Signature, 3) as MultiEd25519Signature;
        }
        set multi_ed25519(value: MultiEd25519Signature) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_multi_ed25519() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get multi_agent() {
            return pb_1.Message.getWrapperField(this, MultiAgentSignature, 4) as MultiAgentSignature;
        }
        set multi_agent(value: MultiAgentSignature) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_multi_agent() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get fee_payer() {
            return pb_1.Message.getWrapperField(this, FeePayerSignature, 5) as FeePayerSignature;
        }
        set fee_payer(value: FeePayerSignature) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_fee_payer() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get signature() {
            const cases: {
                [index: number]: "none" | "ed25519" | "multi_ed25519" | "multi_agent" | "fee_payer";
            } = {
                0: "none",
                2: "ed25519",
                3: "multi_ed25519",
                4: "multi_agent",
                5: "fee_payer"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5])];
        }
        static fromObject(data: {
            type?: Signature.Type;
            ed25519?: ReturnType<typeof Ed25519Signature.prototype.toObject>;
            multi_ed25519?: ReturnType<typeof MultiEd25519Signature.prototype.toObject>;
            multi_agent?: ReturnType<typeof MultiAgentSignature.prototype.toObject>;
            fee_payer?: ReturnType<typeof FeePayerSignature.prototype.toObject>;
        }): Signature {
            const message = new Signature({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.ed25519 != null) {
                message.ed25519 = Ed25519Signature.fromObject(data.ed25519);
            }
            if (data.multi_ed25519 != null) {
                message.multi_ed25519 = MultiEd25519Signature.fromObject(data.multi_ed25519);
            }
            if (data.multi_agent != null) {
                message.multi_agent = MultiAgentSignature.fromObject(data.multi_agent);
            }
            if (data.fee_payer != null) {
                message.fee_payer = FeePayerSignature.fromObject(data.fee_payer);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: Signature.Type;
                ed25519?: ReturnType<typeof Ed25519Signature.prototype.toObject>;
                multi_ed25519?: ReturnType<typeof MultiEd25519Signature.prototype.toObject>;
                multi_agent?: ReturnType<typeof MultiAgentSignature.prototype.toObject>;
                fee_payer?: ReturnType<typeof FeePayerSignature.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.ed25519 != null) {
                data.ed25519 = this.ed25519.toObject();
            }
            if (this.multi_ed25519 != null) {
                data.multi_ed25519 = this.multi_ed25519.toObject();
            }
            if (this.multi_agent != null) {
                data.multi_agent = this.multi_agent.toObject();
            }
            if (this.fee_payer != null) {
                data.fee_payer = this.fee_payer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != Signature.Type.TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.has_ed25519)
                writer.writeMessage(2, this.ed25519, () => this.ed25519.serialize(writer));
            if (this.has_multi_ed25519)
                writer.writeMessage(3, this.multi_ed25519, () => this.multi_ed25519.serialize(writer));
            if (this.has_multi_agent)
                writer.writeMessage(4, this.multi_agent, () => this.multi_agent.serialize(writer));
            if (this.has_fee_payer)
                writer.writeMessage(5, this.fee_payer, () => this.fee_payer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Signature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Signature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.ed25519, () => message.ed25519 = Ed25519Signature.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.multi_ed25519, () => message.multi_ed25519 = MultiEd25519Signature.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.multi_agent, () => message.multi_agent = MultiAgentSignature.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.fee_payer, () => message.fee_payer = FeePayerSignature.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Signature {
            return Signature.deserialize(bytes);
        }
    }
    export namespace Signature {
        export enum Type {
            TYPE_UNSPECIFIED = 0,
            TYPE_ED25519 = 1,
            TYPE_MULTI_ED25519 = 2,
            TYPE_MULTI_AGENT = 3,
            TYPE_FEE_PAYER = 4
        }
    }
    export class Ed25519Signature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            public_key?: Uint8Array;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("public_key" in data && data.public_key != undefined) {
                    this.public_key = data.public_key;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get public_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set public_key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            public_key?: Uint8Array;
            signature?: Uint8Array;
        }): Ed25519Signature {
            const message = new Ed25519Signature({});
            if (data.public_key != null) {
                message.public_key = data.public_key;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                public_key?: Uint8Array;
                signature?: Uint8Array;
            } = {};
            if (this.public_key != null) {
                data.public_key = this.public_key;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.public_key.length)
                writer.writeBytes(1, this.public_key);
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ed25519Signature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ed25519Signature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.public_key = reader.readBytes();
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ed25519Signature {
            return Ed25519Signature.deserialize(bytes);
        }
    }
    export class MultiEd25519Signature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            public_keys?: Uint8Array[];
            signatures?: Uint8Array[];
            threshold?: number;
            public_key_indices?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("public_keys" in data && data.public_keys != undefined) {
                    this.public_keys = data.public_keys;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
                if ("threshold" in data && data.threshold != undefined) {
                    this.threshold = data.threshold;
                }
                if ("public_key_indices" in data && data.public_key_indices != undefined) {
                    this.public_key_indices = data.public_key_indices;
                }
            }
        }
        get public_keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set public_keys(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get signatures() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set signatures(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get threshold() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set threshold(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get public_key_indices() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set public_key_indices(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            public_keys?: Uint8Array[];
            signatures?: Uint8Array[];
            threshold?: number;
            public_key_indices?: number[];
        }): MultiEd25519Signature {
            const message = new MultiEd25519Signature({});
            if (data.public_keys != null) {
                message.public_keys = data.public_keys;
            }
            if (data.signatures != null) {
                message.signatures = data.signatures;
            }
            if (data.threshold != null) {
                message.threshold = data.threshold;
            }
            if (data.public_key_indices != null) {
                message.public_key_indices = data.public_key_indices;
            }
            return message;
        }
        toObject() {
            const data: {
                public_keys?: Uint8Array[];
                signatures?: Uint8Array[];
                threshold?: number;
                public_key_indices?: number[];
            } = {};
            if (this.public_keys != null) {
                data.public_keys = this.public_keys;
            }
            if (this.signatures != null) {
                data.signatures = this.signatures;
            }
            if (this.threshold != null) {
                data.threshold = this.threshold;
            }
            if (this.public_key_indices != null) {
                data.public_key_indices = this.public_key_indices;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.public_keys.length)
                writer.writeRepeatedBytes(1, this.public_keys);
            if (this.signatures.length)
                writer.writeRepeatedBytes(2, this.signatures);
            if (this.threshold != 0)
                writer.writeUint32(3, this.threshold);
            if (this.public_key_indices.length)
                writer.writePackedUint32(4, this.public_key_indices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiEd25519Signature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiEd25519Signature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        message.threshold = reader.readUint32();
                        break;
                    case 4:
                        message.public_key_indices = reader.readPackedUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiEd25519Signature {
            return MultiEd25519Signature.deserialize(bytes);
        }
    }
    export class MultiAgentSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: AccountSignature;
            secondary_signer_addresses?: string[];
            secondary_signers?: AccountSignature[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("secondary_signer_addresses" in data && data.secondary_signer_addresses != undefined) {
                    this.secondary_signer_addresses = data.secondary_signer_addresses;
                }
                if ("secondary_signers" in data && data.secondary_signers != undefined) {
                    this.secondary_signers = data.secondary_signers;
                }
            }
        }
        get sender() {
            return pb_1.Message.getWrapperField(this, AccountSignature, 1) as AccountSignature;
        }
        set sender(value: AccountSignature) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_sender() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get secondary_signer_addresses() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set secondary_signer_addresses(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get secondary_signers() {
            return pb_1.Message.getRepeatedWrapperField(this, AccountSignature, 3) as AccountSignature[];
        }
        set secondary_signers(value: AccountSignature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            sender?: ReturnType<typeof AccountSignature.prototype.toObject>;
            secondary_signer_addresses?: string[];
            secondary_signers?: ReturnType<typeof AccountSignature.prototype.toObject>[];
        }): MultiAgentSignature {
            const message = new MultiAgentSignature({});
            if (data.sender != null) {
                message.sender = AccountSignature.fromObject(data.sender);
            }
            if (data.secondary_signer_addresses != null) {
                message.secondary_signer_addresses = data.secondary_signer_addresses;
            }
            if (data.secondary_signers != null) {
                message.secondary_signers = data.secondary_signers.map(item => AccountSignature.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: ReturnType<typeof AccountSignature.prototype.toObject>;
                secondary_signer_addresses?: string[];
                secondary_signers?: ReturnType<typeof AccountSignature.prototype.toObject>[];
            } = {};
            if (this.sender != null) {
                data.sender = this.sender.toObject();
            }
            if (this.secondary_signer_addresses != null) {
                data.secondary_signer_addresses = this.secondary_signer_addresses;
            }
            if (this.secondary_signers != null) {
                data.secondary_signers = this.secondary_signers.map((item: AccountSignature) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sender)
                writer.writeMessage(1, this.sender, () => this.sender.serialize(writer));
            if (this.secondary_signer_addresses.length)
                writer.writeRepeatedString(2, this.secondary_signer_addresses);
            if (this.secondary_signers.length)
                writer.writeRepeatedMessage(3, this.secondary_signers, (item: AccountSignature) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultiAgentSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiAgentSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sender, () => message.sender = AccountSignature.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.secondary_signers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AccountSignature.deserialize(reader), AccountSignature));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultiAgentSignature {
            return MultiAgentSignature.deserialize(bytes);
        }
    }
    export class FeePayerSignature extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: AccountSignature;
            secondary_signer_addresses?: string[];
            secondary_signers?: AccountSignature[];
            fee_payer_address?: string;
            fee_payer_signer?: AccountSignature;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("secondary_signer_addresses" in data && data.secondary_signer_addresses != undefined) {
                    this.secondary_signer_addresses = data.secondary_signer_addresses;
                }
                if ("secondary_signers" in data && data.secondary_signers != undefined) {
                    this.secondary_signers = data.secondary_signers;
                }
                if ("fee_payer_address" in data && data.fee_payer_address != undefined) {
                    this.fee_payer_address = data.fee_payer_address;
                }
                if ("fee_payer_signer" in data && data.fee_payer_signer != undefined) {
                    this.fee_payer_signer = data.fee_payer_signer;
                }
            }
        }
        get sender() {
            return pb_1.Message.getWrapperField(this, AccountSignature, 1) as AccountSignature;
        }
        set sender(value: AccountSignature) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_sender() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get secondary_signer_addresses() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set secondary_signer_addresses(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get secondary_signers() {
            return pb_1.Message.getRepeatedWrapperField(this, AccountSignature, 3) as AccountSignature[];
        }
        set secondary_signers(value: AccountSignature[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get fee_payer_address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set fee_payer_address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fee_payer_signer() {
            return pb_1.Message.getWrapperField(this, AccountSignature, 5) as AccountSignature;
        }
        set fee_payer_signer(value: AccountSignature) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_fee_payer_signer() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            sender?: ReturnType<typeof AccountSignature.prototype.toObject>;
            secondary_signer_addresses?: string[];
            secondary_signers?: ReturnType<typeof AccountSignature.prototype.toObject>[];
            fee_payer_address?: string;
            fee_payer_signer?: ReturnType<typeof AccountSignature.prototype.toObject>;
        }): FeePayerSignature {
            const message = new FeePayerSignature({});
            if (data.sender != null) {
                message.sender = AccountSignature.fromObject(data.sender);
            }
            if (data.secondary_signer_addresses != null) {
                message.secondary_signer_addresses = data.secondary_signer_addresses;
            }
            if (data.secondary_signers != null) {
                message.secondary_signers = data.secondary_signers.map(item => AccountSignature.fromObject(item));
            }
            if (data.fee_payer_address != null) {
                message.fee_payer_address = data.fee_payer_address;
            }
            if (data.fee_payer_signer != null) {
                message.fee_payer_signer = AccountSignature.fromObject(data.fee_payer_signer);
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: ReturnType<typeof AccountSignature.prototype.toObject>;
                secondary_signer_addresses?: string[];
                secondary_signers?: ReturnType<typeof AccountSignature.prototype.toObject>[];
                fee_payer_address?: string;
                fee_payer_signer?: ReturnType<typeof AccountSignature.prototype.toObject>;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender.toObject();
            }
            if (this.secondary_signer_addresses != null) {
                data.secondary_signer_addresses = this.secondary_signer_addresses;
            }
            if (this.secondary_signers != null) {
                data.secondary_signers = this.secondary_signers.map((item: AccountSignature) => item.toObject());
            }
            if (this.fee_payer_address != null) {
                data.fee_payer_address = this.fee_payer_address;
            }
            if (this.fee_payer_signer != null) {
                data.fee_payer_signer = this.fee_payer_signer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sender)
                writer.writeMessage(1, this.sender, () => this.sender.serialize(writer));
            if (this.secondary_signer_addresses.length)
                writer.writeRepeatedString(2, this.secondary_signer_addresses);
            if (this.secondary_signers.length)
                writer.writeRepeatedMessage(3, this.secondary_signers, (item: AccountSignature) => item.serialize(writer));
            if (this.fee_payer_address.length)
                writer.writeString(4, this.fee_payer_address);
            if (this.has_fee_payer_signer)
                writer.writeMessage(5, this.fee_payer_signer, () => this.fee_payer_signer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeePayerSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeePayerSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sender, () => message.sender = AccountSignature.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.secondary_signers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AccountSignature.deserialize(reader), AccountSignature));
                        break;
                    case 4:
                        message.fee_payer_address = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.fee_payer_signer, () => message.fee_payer_signer = AccountSignature.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeePayerSignature {
            return FeePayerSignature.deserialize(bytes);
        }
    }
    export class AccountSignature extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            type?: AccountSignature.Type;
        } & (({
            ed25519?: Ed25519Signature;
            multi_ed25519?: never;
        } | {
            ed25519?: never;
            multi_ed25519?: MultiEd25519Signature;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("ed25519" in data && data.ed25519 != undefined) {
                    this.ed25519 = data.ed25519;
                }
                if ("multi_ed25519" in data && data.multi_ed25519 != undefined) {
                    this.multi_ed25519 = data.multi_ed25519;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, AccountSignature.Type.TYPE_UNSPECIFIED) as AccountSignature.Type;
        }
        set type(value: AccountSignature.Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get ed25519() {
            return pb_1.Message.getWrapperField(this, Ed25519Signature, 2) as Ed25519Signature;
        }
        set ed25519(value: Ed25519Signature) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ed25519() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get multi_ed25519() {
            return pb_1.Message.getWrapperField(this, MultiEd25519Signature, 3) as MultiEd25519Signature;
        }
        set multi_ed25519(value: MultiEd25519Signature) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_multi_ed25519() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get signature() {
            const cases: {
                [index: number]: "none" | "ed25519" | "multi_ed25519";
            } = {
                0: "none",
                2: "ed25519",
                3: "multi_ed25519"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            type?: AccountSignature.Type;
            ed25519?: ReturnType<typeof Ed25519Signature.prototype.toObject>;
            multi_ed25519?: ReturnType<typeof MultiEd25519Signature.prototype.toObject>;
        }): AccountSignature {
            const message = new AccountSignature({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.ed25519 != null) {
                message.ed25519 = Ed25519Signature.fromObject(data.ed25519);
            }
            if (data.multi_ed25519 != null) {
                message.multi_ed25519 = MultiEd25519Signature.fromObject(data.multi_ed25519);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: AccountSignature.Type;
                ed25519?: ReturnType<typeof Ed25519Signature.prototype.toObject>;
                multi_ed25519?: ReturnType<typeof MultiEd25519Signature.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.ed25519 != null) {
                data.ed25519 = this.ed25519.toObject();
            }
            if (this.multi_ed25519 != null) {
                data.multi_ed25519 = this.multi_ed25519.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != AccountSignature.Type.TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.has_ed25519)
                writer.writeMessage(2, this.ed25519, () => this.ed25519.serialize(writer));
            if (this.has_multi_ed25519)
                writer.writeMessage(3, this.multi_ed25519, () => this.multi_ed25519.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountSignature {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountSignature();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.ed25519, () => message.ed25519 = Ed25519Signature.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.multi_ed25519, () => message.multi_ed25519 = MultiEd25519Signature.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountSignature {
            return AccountSignature.deserialize(bytes);
        }
    }
    export namespace AccountSignature {
        export enum Type {
            TYPE_UNSPECIFIED = 0,
            TYPE_ED25519 = 1,
            TYPE_MULTI_ED25519 = 2
        }
    }
}
