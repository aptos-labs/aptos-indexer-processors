/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: aptos/internal/fullnode/v1/fullnode_data.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../transaction/v1/transaction";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace aptos.internal.fullnode.v1 {
    export class TransactionsOutput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactions?: dependency_1.aptos.transaction.v1.Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.aptos.transaction.v1.Transaction, 1) as dependency_1.aptos.transaction.v1.Transaction[];
        }
        set transactions(value: dependency_1.aptos.transaction.v1.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof dependency_1.aptos.transaction.v1.Transaction.prototype.toObject>[];
        }): TransactionsOutput {
            const message = new TransactionsOutput({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => dependency_1.aptos.transaction.v1.Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof dependency_1.aptos.transaction.v1.Transaction.prototype.toObject>[];
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: dependency_1.aptos.transaction.v1.Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions.length)
                writer.writeRepeatedMessage(1, this.transactions, (item: dependency_1.aptos.transaction.v1.Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionsOutput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionsOutput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.aptos.transaction.v1.Transaction.deserialize(reader), dependency_1.aptos.transaction.v1.Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionsOutput {
            return TransactionsOutput.deserialize(bytes);
        }
    }
    export class StreamStatus extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            type?: StreamStatus.StatusType;
            start_version?: number;
        } & (({
            end_version?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("start_version" in data && data.start_version != undefined) {
                    this.start_version = data.start_version;
                }
                if ("end_version" in data && data.end_version != undefined) {
                    this.end_version = data.end_version;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, StreamStatus.StatusType.STATUS_TYPE_UNSPECIFIED) as StreamStatus.StatusType;
        }
        set type(value: StreamStatus.StatusType) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "0") as string;
        }
        set end_version(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_end_version() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _end_version() {
            const cases: {
                [index: number]: "none" | "end_version";
            } = {
                0: "none",
                3: "end_version"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            type?: StreamStatus.StatusType;
            start_version?: number;
            end_version?: string;
        }): StreamStatus {
            const message = new StreamStatus({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.start_version != null) {
                message.start_version = data.start_version;
            }
            if (data.end_version != null) {
                message.end_version = data.end_version;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: StreamStatus.StatusType;
                start_version?: number;
                end_version?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.start_version != null) {
                data.start_version = this.start_version;
            }
            if (this.end_version != null) {
                data.end_version = this.end_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != StreamStatus.StatusType.STATUS_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.start_version != 0)
                writer.writeUint64(2, this.start_version);
            if (this.has_end_version)
                writer.writeUint64String(3, this.end_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.start_version = reader.readUint64();
                        break;
                    case 3:
                        message.end_version = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamStatus {
            return StreamStatus.deserialize(bytes);
        }
    }
    export namespace StreamStatus {
        export enum StatusType {
            STATUS_TYPE_UNSPECIFIED = 0,
            STATUS_TYPE_INIT = 1,
            STATUS_TYPE_BATCH_END = 2
        }
    }
    export class GetTransactionsFromNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            starting_version?: string;
        }) | ({
            transactions_count?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("starting_version" in data && data.starting_version != undefined) {
                    this.starting_version = data.starting_version;
                }
                if ("transactions_count" in data && data.transactions_count != undefined) {
                    this.transactions_count = data.transactions_count;
                }
            }
        }
        get starting_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "0") as string;
        }
        set starting_version(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_starting_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get transactions_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, "0") as string;
        }
        set transactions_count(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_transactions_count() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _starting_version() {
            const cases: {
                [index: number]: "none" | "starting_version";
            } = {
                0: "none",
                1: "starting_version"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _transactions_count() {
            const cases: {
                [index: number]: "none" | "transactions_count";
            } = {
                0: "none",
                2: "transactions_count"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            starting_version?: string;
            transactions_count?: string;
        }): GetTransactionsFromNodeRequest {
            const message = new GetTransactionsFromNodeRequest({});
            if (data.starting_version != null) {
                message.starting_version = data.starting_version;
            }
            if (data.transactions_count != null) {
                message.transactions_count = data.transactions_count;
            }
            return message;
        }
        toObject() {
            const data: {
                starting_version?: string;
                transactions_count?: string;
            } = {};
            if (this.starting_version != null) {
                data.starting_version = this.starting_version;
            }
            if (this.transactions_count != null) {
                data.transactions_count = this.transactions_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_starting_version)
                writer.writeUint64String(1, this.starting_version);
            if (this.has_transactions_count)
                writer.writeUint64String(2, this.transactions_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTransactionsFromNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTransactionsFromNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.starting_version = reader.readUint64String();
                        break;
                    case 2:
                        message.transactions_count = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTransactionsFromNodeRequest {
            return GetTransactionsFromNodeRequest.deserialize(bytes);
        }
    }
    export class TransactionsFromNodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            chain_id?: number;
        } & (({
            status?: StreamStatus;
            data?: never;
        } | {
            status?: never;
            data?: TransactionsOutput;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, StreamStatus, 1) as StreamStatus;
        }
        set status(value: StreamStatus) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, TransactionsOutput, 2) as TransactionsOutput;
        }
        set data(value: TransactionsOutput) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set chain_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get response() {
            const cases: {
                [index: number]: "none" | "status" | "data";
            } = {
                0: "none",
                1: "status",
                2: "data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            status?: ReturnType<typeof StreamStatus.prototype.toObject>;
            data?: ReturnType<typeof TransactionsOutput.prototype.toObject>;
            chain_id?: number;
        }): TransactionsFromNodeResponse {
            const message = new TransactionsFromNodeResponse({});
            if (data.status != null) {
                message.status = StreamStatus.fromObject(data.status);
            }
            if (data.data != null) {
                message.data = TransactionsOutput.fromObject(data.data);
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof StreamStatus.prototype.toObject>;
                data?: ReturnType<typeof TransactionsOutput.prototype.toObject>;
                chain_id?: number;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (this.chain_id != 0)
                writer.writeUint32(3, this.chain_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionsFromNodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionsFromNodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = StreamStatus.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = TransactionsOutput.deserialize(reader));
                        break;
                    case 3:
                        message.chain_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionsFromNodeResponse {
            return TransactionsFromNodeResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedFullnodeDataService {
        static definition = {
            GetTransactionsFromNode: {
                path: "/aptos.internal.fullnode.v1.FullnodeData/GetTransactionsFromNode",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetTransactionsFromNodeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTransactionsFromNodeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransactionsFromNodeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransactionsFromNodeResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTransactionsFromNode(call: grpc_1.ServerWritableStream<GetTransactionsFromNodeRequest, TransactionsFromNodeResponse>): void;
    }
    export class FullnodeDataClient extends grpc_1.makeGenericClientConstructor(UnimplementedFullnodeDataService.definition, "FullnodeData", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTransactionsFromNode: GrpcStreamServiceInterface<GetTransactionsFromNodeRequest, GetTransactionsFromNodeRequest> = (message: GetTransactionsFromNodeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetTransactionsFromNodeRequest> => {
            return super.GetTransactionsFromNode(message, metadata, options);
        };
    }
}
