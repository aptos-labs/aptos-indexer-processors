/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: aptos/bigquery_schema/v1/transaction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace aptos.bigquery_schema.transaction.v1 {
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version: number;
            block_height: number;
            hash: string;
            type: string;
            payload?: string;
            state_change_hash: string;
            event_root_hash: string;
            state_checkpoint_hash?: string;
            gas_used: number;
            success: boolean;
            vm_status: string;
            accumulator_root_hash: string;
            num_events: number;
            num_write_set_changes: number;
            epoch: number;
            inserted_at: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.version = data.version;
                this.block_height = data.block_height;
                this.hash = data.hash;
                this.type = data.type;
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                this.state_change_hash = data.state_change_hash;
                this.event_root_hash = data.event_root_hash;
                if ("state_checkpoint_hash" in data && data.state_checkpoint_hash != undefined) {
                    this.state_checkpoint_hash = data.state_checkpoint_hash;
                }
                this.gas_used = data.gas_used;
                this.success = data.success;
                this.vm_status = data.vm_status;
                this.accumulator_root_hash = data.accumulator_root_hash;
                this.num_events = data.num_events;
                this.num_write_set_changes = data.num_write_set_changes;
                this.epoch = data.epoch;
                this.inserted_at = data.inserted_at;
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block_height() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_block_height() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get hash() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_hash() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get state_change_hash() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set state_change_hash(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_state_change_hash() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get event_root_hash() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set event_root_hash(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_event_root_hash() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get state_checkpoint_hash() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set state_checkpoint_hash(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_state_checkpoint_hash() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get gas_used() {
            return pb_1.Message.getField(this, 9) as number;
        }
        set gas_used(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_gas_used() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get success() {
            return pb_1.Message.getField(this, 10) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get vm_status() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set vm_status(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_vm_status() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get accumulator_root_hash() {
            return pb_1.Message.getField(this, 12) as string;
        }
        set accumulator_root_hash(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_accumulator_root_hash() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get num_events() {
            return pb_1.Message.getField(this, 13) as number;
        }
        set num_events(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_num_events() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get num_write_set_changes() {
            return pb_1.Message.getField(this, 14) as number;
        }
        set num_write_set_changes(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_num_write_set_changes() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get epoch() {
            return pb_1.Message.getField(this, 15) as number;
        }
        set epoch(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_epoch() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get inserted_at() {
            return pb_1.Message.getField(this, 16) as number;
        }
        set inserted_at(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_inserted_at() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            version?: number;
            block_height?: number;
            hash?: string;
            type?: string;
            payload?: string;
            state_change_hash?: string;
            event_root_hash?: string;
            state_checkpoint_hash?: string;
            gas_used?: number;
            success?: boolean;
            vm_status?: string;
            accumulator_root_hash?: string;
            num_events?: number;
            num_write_set_changes?: number;
            epoch?: number;
            inserted_at?: number;
        }): Transaction {
            const message = new Transaction({
                version: data.version,
                block_height: data.block_height,
                hash: data.hash,
                type: data.type,
                state_change_hash: data.state_change_hash,
                event_root_hash: data.event_root_hash,
                gas_used: data.gas_used,
                success: data.success,
                vm_status: data.vm_status,
                accumulator_root_hash: data.accumulator_root_hash,
                num_events: data.num_events,
                num_write_set_changes: data.num_write_set_changes,
                epoch: data.epoch,
                inserted_at: data.inserted_at
            });
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.state_checkpoint_hash != null) {
                message.state_checkpoint_hash = data.state_checkpoint_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: number;
                block_height?: number;
                hash?: string;
                type?: string;
                payload?: string;
                state_change_hash?: string;
                event_root_hash?: string;
                state_checkpoint_hash?: string;
                gas_used?: number;
                success?: boolean;
                vm_status?: string;
                accumulator_root_hash?: string;
                num_events?: number;
                num_write_set_changes?: number;
                epoch?: number;
                inserted_at?: number;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.state_change_hash != null) {
                data.state_change_hash = this.state_change_hash;
            }
            if (this.event_root_hash != null) {
                data.event_root_hash = this.event_root_hash;
            }
            if (this.state_checkpoint_hash != null) {
                data.state_checkpoint_hash = this.state_checkpoint_hash;
            }
            if (this.gas_used != null) {
                data.gas_used = this.gas_used;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.vm_status != null) {
                data.vm_status = this.vm_status;
            }
            if (this.accumulator_root_hash != null) {
                data.accumulator_root_hash = this.accumulator_root_hash;
            }
            if (this.num_events != null) {
                data.num_events = this.num_events;
            }
            if (this.num_write_set_changes != null) {
                data.num_write_set_changes = this.num_write_set_changes;
            }
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.inserted_at != null) {
                data.inserted_at = this.inserted_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version)
                writer.writeInt64(1, this.version);
            if (this.has_block_height)
                writer.writeInt64(2, this.block_height);
            if (this.has_hash && this.hash.length)
                writer.writeString(3, this.hash);
            if (this.has_type && this.type.length)
                writer.writeString(4, this.type);
            if (this.has_payload && this.payload.length)
                writer.writeString(5, this.payload);
            if (this.has_state_change_hash && this.state_change_hash.length)
                writer.writeString(6, this.state_change_hash);
            if (this.has_event_root_hash && this.event_root_hash.length)
                writer.writeString(7, this.event_root_hash);
            if (this.has_state_checkpoint_hash && this.state_checkpoint_hash.length)
                writer.writeString(8, this.state_checkpoint_hash);
            if (this.has_gas_used)
                writer.writeUint64(9, this.gas_used);
            if (this.has_success)
                writer.writeBool(10, this.success);
            if (this.has_vm_status && this.vm_status.length)
                writer.writeString(11, this.vm_status);
            if (this.has_accumulator_root_hash && this.accumulator_root_hash.length)
                writer.writeString(12, this.accumulator_root_hash);
            if (this.has_num_events)
                writer.writeInt64(13, this.num_events);
            if (this.has_num_write_set_changes)
                writer.writeInt64(14, this.num_write_set_changes);
            if (this.has_epoch)
                writer.writeInt64(15, this.epoch);
            if (this.has_inserted_at)
                writer.writeInt64(16, this.inserted_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readInt64();
                        break;
                    case 2:
                        message.block_height = reader.readInt64();
                        break;
                    case 3:
                        message.hash = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        message.payload = reader.readString();
                        break;
                    case 6:
                        message.state_change_hash = reader.readString();
                        break;
                    case 7:
                        message.event_root_hash = reader.readString();
                        break;
                    case 8:
                        message.state_checkpoint_hash = reader.readString();
                        break;
                    case 9:
                        message.gas_used = reader.readUint64();
                        break;
                    case 10:
                        message.success = reader.readBool();
                        break;
                    case 11:
                        message.vm_status = reader.readString();
                        break;
                    case 12:
                        message.accumulator_root_hash = reader.readString();
                        break;
                    case 13:
                        message.num_events = reader.readInt64();
                        break;
                    case 14:
                        message.num_write_set_changes = reader.readInt64();
                        break;
                    case 15:
                        message.epoch = reader.readInt64();
                        break;
                    case 16:
                        message.inserted_at = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
}
