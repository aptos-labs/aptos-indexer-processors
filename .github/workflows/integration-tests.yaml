name: Run Integration Tests
run-name: Run Integration Tests for commit ${{ github.event.client_payload.commit_hash || github.event.inputs.commit_hash || 'main' }} by @${{ github.actor }}
on:
  repository_dispatch:
    types: [test-txn-json-change-detected]  # Custom event type to trigger the workflow

  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to use for the dependency update'
        required: true
        default: 'main'
  push:
    branches:
      - main
  pull_request:

jobs:
  Integration-tests:
    runs-on: runs-on,runner=2cpu-linux-x64,run-id=${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.branch || 'main' }}  # Use PR branch or fallback to 'main'

      # Optional: Verify which commit is being used
      - name: Display the current commit
        run: |
          git log -1
          echo "Using commit hash: ${{ github.event.client_payload.commit_hash || github.event.inputs.commit_hash || github.sha }}"

      # 2. Install toml-cli
      - name: Install toml-cli
        run: cargo install toml-cli

      - name: Show Cargo.toml Before Update
        run: cat rust/Cargo.toml

      # 4. Update aptos-indexer-test-transactions dependency using the same commit hash
      - name: Update aptos-indexer-test-transactions dependency
        if: ${{ github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch' }}
        run: |
          COMMIT_HASH=${{ github.event.client_payload.commit_hash || github.event.inputs.commit_hash }}
          echo "Updating aptos-indexer-test-transactions dependency in Cargo.toml to use commit hash $COMMIT_HASH"
          toml set rust/Cargo.toml workspace.dependencies.aptos-indexer-test-transactions.rev "$COMMIT_HASH" > Cargo.tmp && mv Cargo.tmp rust/Cargo.toml

      - name: Show Cargo.toml After Update
        run: cat rust/Cargo.toml

      # 5. Ensure Cargo.lock is updated with the latest dependencies
      - name: Update Dependencies
        run: cargo update
        working-directory: rust

      # 6. Install dependencies and lint the code
      - name: Install Dependencies and Run Linter
        run: |
          echo "Installing dependencies and running linter"
          cargo check --verbose    # Ensure dependencies are resolved correctly
          cargo fmt -- --check      # Run rustfmt to check for formatting issues
          cargo clippy --all-targets --all-features -- -D warnings # Run clippy and treat warnings as errors
        working-directory: rust

      # 7. Run integration tests with proper manifest path
      - name: Run Integration Tests
        run: cargo test --manifest-path integration-tests/Cargo.toml
        working-directory: rust

      # Optional: Save logs and artifacts if needed for debugging
      - name: Save Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: rust/target/debug/deps
